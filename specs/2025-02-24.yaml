openapi: 3.0.0
info:
  title: Chariot API
  version: "v1"
  description: The Chariot REST API. Please see https://docs.givechariot.com/api for more details.
  contact:
    name: Chariot Development Team
    url: https://givechariot.com/contact
    email: developers@givechariot.com
  termsOfService: https://givechariot.com/legal-nonprofit
servers:
  - url: https://sandboxapi.givechariot.com
    description: Sandbox
  - url: https://api.givechariot.com
    description: Production
paths:
  /v1/organizations/search:
    get:
      summary: Search organizations
      description: |-
        Search for organizations by name or EIN.
        This endpoint exists to support a typeahead search or quick lookup by nonprofit EIN or name.
        The Get Organization API should be used to retrieve detailed information about an organization.
      operationId: searchOrganizations
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: ein
          in: query
          description: |-
            The Employer Identification Number (EIN) or TaxID for the nonprofit entity.
          schema:
            type: string
        - name: name
          in: query
          description: |-
            The name of the organization.
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/SearchOrganizationsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/organizations/{id}:
    get:
      summary: Get organization
      description: |-
        Retrieves the organization with the given ID.
      operationId: getOrganization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the organization
          schema:
            type: string
          required: true
          example: "org_1LaXpKGUcADgqoEMl0Cx0Ygg"
      responses:
        "200":
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/connects:
    post:
      summary: Create Connect
      description: |-
        Get an existing connect or create a new connect for an existing nonprofit organization.

        The returned Connect can be used to integrate the client-side Chariot Connect component using the `id` property (CID) and also query for data generated from the Chariot Connect instance from the Chariot API using the `x-chariot-api-key` header parameter.

        <Note>
        Only one Connect object can be created per organization.
        If one already exists, this will return a `200 OK` status with the existing object.
        </Note>
      operationId: create-connect
      tags:
        - Connects
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateConnectRequest"
      responses:
        "200":
          description: OK
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connect"
              examples:
                Simple:
                  $ref: "#/components/examples/ConnectOutput"
        "201":
          description: Created
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connect"
              examples:
                Simple:
                  $ref: "#/components/examples/ConnectOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/connects/{id}:
    get:
      summary: Get Connect
      description: |-
        Retrieve a connect with the given ID.
      operationId: get-connect
      tags:
        - Connects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: the unique id of the connect
          schema:
            type: string
          required: true
          example: live_xJd0lUrvpDkzeGBWZbuI2wbvEdM
      responses:
        "200":
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connect"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/grants:
    get:
      summary: List Grants
      description: |-
        Returns a list of all grants for a given Connect. This API allows for paginating over many results.
      operationId: list-grants
      tags:
        - Grants
      security:
        - bearerAuth: []
      parameters:
        - name: x-chariot-api-key
          in: header
          description: the `apiKey` of the Connect object
          schema:
            type: string
          required: true
          example: "live_xJd0lUrvpDkzeGBWZbuI2wbvEdM"
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls and the value of this field should be from the nextPageToken in the previous response.
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListGrantsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create Grant
      description: |-
        Create and submit a new grant. This should be used to capture a grant intent from an authorized DAFpay workflow session and submit the grant request to the DAF sponsor.

        <Warning>
        Error handling:
        - The grant must be captured within 15 minutes of authorization otherwise the request will return status `410 Gone`.
        - A grant can only be captured once from any given workflow session so any duplicate requests will return status `409 Conflict`.
        - The amount must be in whole dollar increments (rounded to the nearest hundred) as currently DAFs only accept whole dollar grants otherwise the request will return status `400 Bad Request`.
        - The amount must be greater than or equal to the minimum grant amount for the DAF otherwise the request will return status `400 Bad Request`.
        - The amount must be less than or equal to the user's DAF account balance otherwise the request will return status `400 Bad Request`.
        - Any inputs exceeding the maximum allowed length will be automatically truncated.
        </Warning>
      operationId: create-grant
      tags:
        - Grants
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/GrantCaptureRequest"
      responses:
        "201":
          description: Created
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              description: The URI reference of the created grant object.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Grant"
              examples:
                Simple:
                  $ref: "#/components/examples/GrantOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "410":
          $ref: "#/components/responses/GoneError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/grants/{id}:
    get:
      summary: Get Grant
      description: |-
        Retrieve a grant with the given ID.
      operationId: get-grant
      tags:
        - Grants
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: |-
            The unique id of the grant.
            The format should be a v4 UUID according to RFC 4122.
          schema:
            type: string
            format: uuid
          required: true
          example: 10229488-08d2-4629-b70c-a2f4f4d25344
      responses:
        "200":
          description: OK
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Grant"
              examples:
                Simple:
                  $ref: "#/components/examples/GrantOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update Grant
      description: |-
        Update a grant object with the given ID.
        This can be used to update the status or acknowledgement of the grant.
      operationId: update-grant
      tags:
        - Grants
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: |-
            The unique id of the grant.
            The format should be a v4 UUID according to RFC 4122.
          schema:
            type: string
            format: uuid
          required: true
          example: 10229488-08d2-4629-b70c-a2f4f4d25344
      requestBody:
        $ref: "#/components/requestBodies/UpdateGrantRequest"
      responses:
        "200":
          description: OK
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Grant"
              examples:
                Simple:
                  $ref: "#/components/examples/GrantOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/recurring_grants:
    get:
      summary: List Recurring Grants
      description: |-
        Returns a list of all recurring grants for a given Connect. This API allows for paginating over many results.
      operationId: list-recurring-grants
      tags:
        - recurring_grants
      security:
        - bearerAuth: []
      parameters:
        - name: x-chariot-api-key
          in: header
          description: the `apiKey` of the Connect object
          schema:
            type: string
          required: true
          example: "live_xJd0lUrvpDkzeGBWZbuI2wbvEdM"
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls and the value of this field should be from the nextPageToken in the previous response.
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListRecurringGrantsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create Recurring Grant
      description: |-
        Create and submit a new recurring grant. This should be used to capture a recurring grant intent from an authorized DAFpay workflow session and submit the recurring grant request to the DAF sponsor.

        <Warning>
        Error handling:
        - The recurring grant must be captured within 15 minutes of authorization otherwise the request will return status `410 Gone`.
        - A recurring grant can only be captured once from any given workflow session so any duplicate requests will return status `409 Conflict`.
        - The amount must be in whole dollar increments (rounded to the nearest hundred) as currently DAFs only accept whole dollar grants otherwise the request will return status `400 Bad Request`.
        - The amount must be greater than or equal to the minimum grant amount for the DAF otherwise the request will return status `400 Bad Request`.
        - The amount must be less than or equal to the user's DAF account balance otherwise the request will return status `400 Bad Request`.
        - Any inputs exceeding the maximum allowed length will be automatically truncated unless otherwise stated.
        </Warning>
      operationId: create-recurring-grant
      tags:
        - recurring_grants
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/RecurringGrantCaptureRequest"
      responses:
        "201":
          description: Created recurring grant
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              description: The URI reference of the created recurring grant object.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecurringGrant"
              examples:
                Simple:
                  $ref: "#/components/examples/RecurringGrantOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "410":
          $ref: "#/components/responses/GoneError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/recurring_grants/{id}:
    get:
      summary: Get Recurring Grant
      description: |-
        Retrieve a recurring grant with a given ID.
      operationId: get-recurring-grant
      tags:
        - recurring_grants
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: |-
            The unique id of the recurring grant.
            The format should be a v4 UUID according to RFC 4122.
          schema:
            type: string
            format: uuid
          required: true
          example: 10229488-08d2-4629-b70c-a2f4f4d25344
      responses:
        "200":
          description: OK
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecurringGrant"
              examples:
                Simple:
                  $ref: "#/components/examples/RecurringGrantOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/unintegrated_grants:
    get:
      summary: List Unintegrated Grants
      description: |-
        Returns a list of all unintegrated grants for a given Connect. This API allows for paginating over many results.
      operationId: list-unintegrated-grants
      tags:
        - unintegrated_grants
      security:
        - bearerAuth: []
      parameters:
        - name: x-chariot-api-key
          in: header
          description: the `apiKey` of the Connect object
          schema:
            type: string
          required: true
          example: "live_xJd0lUrvpDkzeGBWZbuI2wbvEdM"
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls and the value of this field should be from the nextPageToken in the previous response.
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListUnintegratedGrantsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/unintegrated_grants/{id}:
    get:
      summary: Get Unintegrated Grant
      description: |-
        Retrieve an unintegrated grant with a given ID.
      operationId: get-unintegrated-grant
      tags:
        - unintegrated_grants
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: |-
            The unique id of the unintegrated grant.
            The format should be a v4 UUID according to RFC 4122.
          schema:
            type: string
            format: uuid
          required: true
          example: 10229488-08d2-4629-b70c-a2f4f4d25344
      responses:
        "200":
          description: OK
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnintegratedGrant"
              examples:
                Simple:
                  $ref: "#/components/examples/UnintegratedGrantOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update Unintegrated Grant
      description: |-
        Update an unintegrated grant object with the given ID.
        This can be used to update the status or acknowledgement of the unintegrated grant.
      operationId: update-unintegrated-grant
      tags:
        - unintegrated_grants
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: |-
            The unique id of the unintegrated grant.
            The format should be a v4 UUID according to RFC 4122.
          schema:
            type: string
            format: uuid
          required: true
          example: 10229488-08d2-4629-b70c-a2f4f4d25344
      requestBody:
        $ref: "#/components/requestBodies/UpdateGrantRequest"
      responses:
        "200":
          description: OK
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnintegratedGrant"
              examples:
                Simple:
                  $ref: "#/components/examples/UnintegratedGrantOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/dafs:
    get:
      summary: List Donor Advised Funds
      description: |-
        Returns a list of all Donor Advised Funds within Chariot's system. This API allows for paginating over many results.

        <Note>
        If there are DAFs missing from the list, please contact support at support@givechariot.com.
        </Note>
      operationId: list-dafs
      tags:
        - Donor Advised Funds
      parameters:
        - name: supportedOnly
          in: query
          description: |-
            If set to true, filters DAFs to only those that have a direct integration with Chariot.
          schema:
            type: boolean
            default: false
        - name: query
          in: query
          description: |-
            If included, filters DAFs to only those that contain the query. This parameter is case insensitive.
          schema:
            type: string
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls.
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListDafsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/dafs/{id}:
    get:
      summary: Get Donor Advised Fund
      description: |-
        Retrieve a DAF with a given ID.
      operationId: get-daf
      tags:
        - Donor Advised Funds
      parameters:
        - name: id
          in: path
          description: |-
            The unique id of the DAF.
            The format should be a v4 UUID according to RFC 4122.
          schema:
            type: string
            format: uuid
          required: true
          example: f9e28217-e0f7-4a54-9764-d664ffb10722
      responses:
        "200":
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Daf"
              examples:
                Npt:
                  $ref: "#/components/examples/DafOutput"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/events:
    get:
      summary: List Events
      description: |-
        List all events corresponding to your Chariot account.
      operationId: listEvents
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: The cursor to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: |
            Filter Events for those with the specified category.
          required: false
          schema:
            $ref: "#/components/schemas/EventCategory"
      responses:
        "200":
          $ref: "#/components/responses/ListEventsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/events/{id}:
    get:
      summary: Get Event
      description: |-
        Retrieve an event with the given ID.
      operationId: getEvent
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique id for the event
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/event_subscriptions:
    post:
      summary: Create an Event Subscription
      description: |-
        Create an event subscription corresponding to your Chariot account.
      operationId: createEventSubscription
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateEventSubscriptionRequest"
      responses:
        "201":
          description: Created
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscription"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: List Event Subscriptions
      description: |-
        List all event subscriptions corresponding to your Chariot account.
      operationId: listEventSubscriptions
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: The cursor to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListEventSubscriptionsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/event_subscriptions/{id}:
    get:
      summary: Get an Event Subscription
      description: |-
        Retrieve an event subscription with the given ID.
      operationId: getEventSubscription
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the event subscription
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscription"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update an Event Subscription
      description: |-
        Update an event subscription with the given ID.
      operationId: updateEventSubscription
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the event subscription
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UpdateEventSubscriptionRequest"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscription"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/financial_accounts:
    get:
      summary: List financial accounts
      description: |
        Returns a list of financial accounts.
      operationId: listFinancialAccounts
      tags:
        - financial_accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ListFinancialAccountsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/financial_accounts/{id}:
    get:
      summary: Get a financial account
      description: |
        Get a financial account by its unique identifier.
      operationId: getFinancialAccount
      tags:
        - financial_accounts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the financial account
          required: true
          schema:
            type: string
          example: "account_01jpjenf5q6cawy43yxfcrxhct"
      responses:
        "200":
          description: The financial account was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FinancialAccount"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/financial_accounts/{id}/balance:
    get:
      summary: Get a financial account balance
      description: |
        Get a financial account balance by its unique identifier.
      operationId: getFinancialAccountBalance
      tags:
        - financial_accounts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the financial account
          required: true
          schema:
            type: string
          example: "account_01jpjenf5q6cawy43yxfcrxhct"
      responses:
        "200":
          description: The financial account was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FinancialAccountBalance"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/disbursements:
    post:
      summary: Create a disbursement
      description: |
        Create a disbursement to send money to an organization.
      operationId: createDisbursement
      tags:
        - disbursements
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateDisbursementRequest"
      responses:
        "201":
          description: The disbursement was created
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Disbursement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          $ref: "#/components/responses/ConflictError"
    get:
      summary: List disbursements
      description: |
        Returns a list of disbursements.
      operationId: listDisbursements
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: organization_id
          in: query
          description: The unique identifier for the organization
          required: false
          schema:
            type: string
          example: "org_01j8rs605a4gctmbm58d87mvsj"
        - name: page_limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: page_token
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls and the value of this field should be from the nextPageToken in the previous response.
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListDisbursementsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/disbursements/{id}:
    get:
      summary: Get a disbursement
      description: |
        Get a disbursement by its unique identifier.
      operationId: getDisbursement
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the disbursement
          required: true
          schema:
            type: string
          example: "disbursement_01jpjen1s23s29kkmnjsb6fzga"
      responses:
        "200":
          description: The disbursement was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Disbursement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/disbursements/{id}/approve:
    post:
      summary: Approve a disbursement
      description: |
        Approve a disbursement in a pending_approval state.
        If the disbursement is in a different state, this will return a 400 error.
      operationId: approveDisbursement
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the disbursement
          required: true
          schema:
            type: string
          example: "disbursement_01jpjen1s23s29kkmnjsb6fzga"
      responses:
        "200":
          description: The disbursement was approved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Disbursement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/disbursements/{id}/cancel:
    post:
      summary: Cancel a pending disbursement
      description: |
        Cancel a pending disbursement in a pending_approval state.
        If the disbursement is in a different state, this will return a 400 error.
      operationId: cancelDisbursement
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the disbursement
          required: true
          schema:
            type: string
          example: "disbursement_01jpjen1s23s29kkmnjsb6fzga"
      responses:
        "200":
          description: The disbursement was canceled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Disbursement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/account_transfers/{id}:
    get:
      summary: Get an account transfer
      description: |
        Get an account transfer by its unique identifier.
      operationId: getAccountTransfer
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the account transfer
          required: true
          schema:
            type: string
          example: "account_transfer_01j8rs605a4gctmbm58d87mvsj"
      responses:
        "200":
          description: The account transfer was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountTransfer"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/ach_transfers/{id}:
    get:
      summary: Get an ACH transfer
      description: |
        Get an ACH transfer by its unique identifier.
      operationId: getAchTransfer
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the ACH transfer
          required: true
          schema:
            type: string
          example: "ach_transfer_01j8rs605a4gctmbm58d87mvsj"
      responses:
        "200":
          description: The ACH transfer was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AchTransfer"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/check_transfers/{id}:
    get:
      summary: Get a check transfer
      description: |
        Get a check transfer by its unique identifier.
      operationId: getCheckTransfer
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the check transfer
          required: true
          schema:
            type: string
          example: "check_transfer_01j8rs605a4gctmbm58d87mvsj"
      responses:
        "200":
          description: The check transfer was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckTransfer"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/check_transfers/{id}/stop:
    post:
      summary: Stop a check transfer
      description: |
        Stop a check transfer.
      operationId: stopCheckTransfer
      tags:
        - disbursements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the check transfer
          required: true
          schema:
            type: string
          example: "check_transfer_01j8rs605a4gctmbm58d87mvsj"
      requestBody:
        $ref: "#/components/requestBodies/StopCheckTransferRequest"
      responses:
        "202":
          description: The check transfer stop payment request was accepted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/simulations/inbound_ach_transfers:
    post:
      summary: "Sandbox: Create an inbound ACH transfer"
      description: |
        Simulates an inbound ACH transfer to your account.
        This is useful for testing account funding via externally originated ACH credit transfers into your Chariot Disbursement Account.

        <Note title="Sandbox Only" icon="atom-simple">
        Only available in the sandbox environment.
        </Note>
      operationId: simulateInboundAchTransfer
      tags:
        - inboundAchTransfers
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateSimulatedInboundAchTransferRequest"
      responses:
        "202":
          description: The simulated inbound ACH transfer was accepted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/simulations/check_transfers/{id}/mail:
    post:
      summary: "Sandbox: Mail a check transfer"
      description: |
        Simulates mailing a check transfer.
        This transfer must have a status of `pending`.

        <Note title="Sandbox Only" icon="fa-light fa-atom-simple">
        This API is only available in the sandbox environment.
        </Note>
      operationId: simulateCheckTransferMail
      tags:
        - checkTransfers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the check transfer
          required: true
          schema:
            type: string
          example: "check_transfer_01j8rs605a4gctmbm58d87mvsj"
      responses:
        "202":
          description: The check transfer mail request was accepted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/simulations/ach_transfers/{id}/submit:
    post:
      summary: "Sandbox: Submit an ACH transfer"
      description: |
        Simulates submitting an ACH transfer.
        This transfer must have a status of `pending_submission`.

        <Note title="Sandbox Only" icon="fa-light fa-atom-simple">
        This API is only available in the sandbox environment.
        </Note>
      operationId: simulateAchTransferSubmit
      tags:
        - achTransfers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the ACH transfer
          required: true
          schema:
            type: string
          example: "ach_transfer_01j8rs605a4gctmbm58d87mvsj"
      responses:
        "202":
          description: The ACH transfer submission request was accepted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/simulations/ach_transfers/{id}/settle:
    post:
      summary: "Sandbox: Settle an ACH transfer"
      description: |
        Simulates settling an ACH transfer.
        This transfer must have a status of `submitted`.

        <Note title="Sandbox Only" icon="fa-light fa-atom-simple">
        This API is only available in the sandbox environment.
        </Note>
      operationId: simulateAchTransferSettlement
      tags:
        - achTransfers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the ACH transfer
          required: true
          schema:
            type: string
          example: "ach_transfer_01j8rs605a4gctmbm58d87mvsj"
      responses:
        "202":
          description: The ACH transfer settlement request was accepted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/simulations/ach_transfers/{id}/return:
    post:
      summary: "Sandbox: Return an ACH transfer"
      description: |
        Simulates returning an ACH transfer.
        This transfer must have a status of `submitted`.

        <Note title="Sandbox Only" icon="fa-light fa-atom-simple">
        This API is only available in the sandbox environment.
        </Note>
      operationId: simulateAchTransferReturn
      tags:
        - achTransfers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the ACH transfer
          required: true
          schema:
            type: string
          example: "ach_transfer_01j8rs605a4gctmbm58d87mvsj"
      responses:
        "202":
          description: The ACH transfer return request was accepted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    OrganizationSummary:
      type: object
      description: |-
        A summary of an organization.
      required:
        - id
        - ein
        - name
      properties:
        id:
          type: string
          description: The unique identifier for the organization.
          example: org_01j8rs605a4gctmbm58d87mvsj
        ein:
          type: string
          description: The Employer Identification Number (EIN) or TaxID for the nonprofit entity.
          example: "123456789"
        name:
          type: string
          description: The name of the organization.
          example: American Red Cross
        daf_eligible:
          type: boolean
          description: Whether the organization is eligible to receive donations from a Donor Advised Fund.
          example: true
        city:
          type: string
          description: The city of the organization.
          example: New York
        state:
          type: string
          description: The state of the organization.
          example: NY
    Organization:
      type: object
      description: |-
        An `Organization` represents an operating nonprofit or an operating sub-organization of a parent or sponsoring nonprofit.
        The generally accepted identifier for an organization is its domain. This domain provides proof of identity, ownership and relationship to an entity.
        Organizations can receive payments from payers on the network.
      required:
        - id
        - ein
        - name
        - classification
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object.
          example: org_01j8rs605a4gctmbm58d87mvsj
        ein:
          type: string
          description: The EIN of the organization.
          example: "123456789"
        name:
          type: string
          description: |-
            The name of the organization.
            For organizations that operate under a different name than the one tied to the legal entity,
            this name will differ from the name of the linked entity.
            This is also known as the "DBA" or "Doing Business As" name of the organization.
          example: American Red Cross
        parent_organization_id:
          type: string
          description: |-
            The unique identifier of the parent organization, if this is a sponsored organization.
            This value is `null` or empty if the organization is not sponsored or not a child of a parent organization.
          example: org_01j8rs605a4gctmbm58d87mvsk
        physical_address:
          $ref: "#/components/schemas/Address"
        classification:
          $ref: "#/components/schemas/NonprofitClassification"
        compliance:
          $ref: "#/components/schemas/NonprofitCompliance"
        mission_statement:
          type: string
          description: The mission statement of the organization
          example: To provide relief to those in need
        web:
          $ref: "#/components/schemas/WebDomain"
        brand:
          $ref: "#/components/schemas/Brand"
        officers:
          type: array
          description: The list of officers of the organization
          items:
            $ref: "#/components/schemas/Person"
    NonprofitClassification:
      type: object
      description: |-
        A classification of the nonprofit entity as defined by the IRS.
      properties:
        group_exemption_number:
          type: string
          description: This is a four-digit internal IRS number assigned to central/parent entity holding group exemption letters.
        subsection_code:
          $ref: "#/components/schemas/TaxExemptCode"
        filing_requirement_code:
          $ref: "#/components/schemas/TaxExemptCode"
        foundation_code:
          $ref: "#/components/schemas/TaxExemptCode"
        affiliation_code:
          $ref: "#/components/schemas/TaxExemptCode"
        organization_code:
          $ref: "#/components/schemas/TaxExemptCode"
        exempt_status_code:
          $ref: "#/components/schemas/TaxExemptCode"
        deductibility_code:
          $ref: "#/components/schemas/TaxExemptCode"
        ntee_code:
          $ref: "#/components/schemas/NteeCode"
        naics_code:
          $ref: "#/components/schemas/NaicsCode"
    NonprofitCompliance:
      type: object
      description: |-
        An object that contains legal information about the nonprofit entity and its tax-exemption status.
        This information is used to comply with regulations and ensure the legitimacy of the nonprofit for purposes of donations and disbursements.
      properties:
        daf_eligible:
          type: boolean
          description: Whether the entity is eligible to receive donations from a Donor Advised Fund
          example: true
        irs_pub_78:
          $ref: "#/components/schemas/ComplianceRequirement"
        ofac:
          $ref: "#/components/schemas/ComplianceRequirement"
        foundation_code:
          $ref: "#/components/schemas/ComplianceRequirement"
        california_attorney_general_registry:
          $ref: "#/components/schemas/ComplianceRequirement"
        california_franchise_tax_board:
          $ref: "#/components/schemas/ComplianceRequirement"
    Person:
      type: object
      description: |-
        A person is an individual who is an officer of a nonprofit.
      required:
        - name
      properties:
        name:
          type: string
          description: The full name of the person
        title:
          type: string
          description: The title or role of the person with respect to the nonprofit entity
          example: Executive Director
        email:
          type: string
          description: The email address of the person
          example: johndoe@example.com
        physical_address:
          $ref: "#/components/schemas/Address"
        created_at:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updated_at:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
    TaxExemptCode:
      type: object
      description: |-
        A tax exempt code is a code that is used to classify the tax-exempt status of a nonprofit entity.
      required:
        - name
        - code
      properties:
        code:
          type: integer
          description: The code of the tax exempt code
          example: 1
        name:
          type: string
          description: The name of the tax exempt code
          example: "UNCONDITIONAL"
        description:
          type: string
          description: The description of the tax exempt code
          example: "Unconditional Exemption"
    NteeCode:
      type: object
      description: |-
        A code that is used to classify the nonprofit entity as defined by the IRS.
      required:
        - code
        - description
      properties:
        code:
          type: string
          description: The code of the NTEE code
          example: "A"
        description:
          type: string
          description: The description of the NTEE code
          example: "Animal Welfare"
        parent_code:
          type: string
          description: The parent code of the NTEE code
          example: "A"
        parent_description:
          type: string
          description: The description of the parent NTEE code
          example: "Animal Welfare"
    NaicsCode:
      type: object
      description: |-
        A code that is used to classify the nonprofit entity as defined by the NAICS.
      properties:
        naics2:
          type: string
          description: The code of the NAICS code
          example: "31"
        naics2_description:
          type: string
          description: The description of the NAICS code
          example: "Manufacturing"
        naics4:
          type: string
          description: The code of the NAICS code
          example: "3112"
        naics4_description:
          type: string
          description: The description of the NAICS code
          example: "Grain and Oilseed Milling"
        naics6:
          type: string
          description: The code of the NAICS code
          example: "311221"
        naics6_description:
          type: string
          description: The description of the NAICS code
          example: "Wet Corn Milling and Starch Manufacturing"
    ComplianceRequirement:
      type: object
      description: |-
        A compliance requirement is a requirement that a nonprofit entity must meet in order to be eligible for Chariot services.
      properties:
        compliant:
          type: boolean
          description: Whether the entity is compliant with the requirement
          example: true
        reason:
          type: string
          description: The reason for the compliance requirement
        last_found_at:
          type: string
          format: date-time
          description: The date and time when the compliance requirement was last found
          example: "2020-07-10 15:00:00.000"
    WebDomain:
      type: object
      description: |-
        A web domain is a unique identifier for a website or web application that is associated with an organization.
        Domains are important identity constructs that underpin the web and online interactions.
        The domain can be used as an identifier and its validity can be asserted via DNS.
      required:
        - domain
      properties:
        domain:
          type: string
          description: The DNS domain name
          example: "redcross.org"
    Brand:
      type: object
      description: |-
        Fair use brand assets that are associated with an organization and can be used for identification and informational purposes.
      properties:
        icon_url:
          type: string
          description: The URL of the organization's icon
        logo_url:
          type: string
          description: The URL of the organization's logo
    Connect:
      type: object
      description: |-
        A Connect represents an instance of Chariot Connect for a particular nonprofit. A nonprofit organization will create Connect objects in order to integrate Chariot Connect into their websites or fundraising platforms to start accepting donations directly from Donor Advised Funds. Each nonprofit can have multiple Connect objects where each one represents a logical separation for how the organization wants to organize their sources of donations. For example, they might have 2 Connect instances, one that they use to integrate Chariot Connect directly on their website and the other that they provide to a 3rd party fundraising platform. On the client side, Chariot Connect is instantiated with the `id` of the Connect object, also called the `cid`. A connect object also contains an `apiKey`. This is useful for nonprofits to provide to fundraising platforms on their behalf to programatically integrate Chariot Connect and access resources and information created from the Connect instance through various Chariot API endpoints. More information on integrating Chariot Connect into a client-side application can be found here: https://givechariot.readme.io
      required:
        - id
        - apiKey
      properties:
        id:
          type: string
          readOnly: true
          description: |-
            The unique identifier for this object. This is also the 'publishable' cid to use for initializing Connect for client-side integration.
          example: test_connect123
        name:
          type: string
          description: A human readable name for the connect, optional.
          example: website
        apiKey:
          type: string
          readOnly: true
          description: A secure token that can be used to make M2M API calls to read data generated by this object.
          example: test_apiTokenABC
        active:
          type: boolean
          description: |-
            A flag to indicate if this connect is active. If true, then this Connect can process donations and grants, otherwise this Connect cannot process grants.
          example: true
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
        createdBy:
          type: string
          readOnly: true
          description: ID of the user who created this object.
          example: auth0-user-id-123
        archived:
          type: boolean
          readOnly: true
          description: A flag to indicate if this object is marked for deletion.
          example: false
        metadata:
          type: object
          description: A map of arbitrary string keys and values to store information about the object.
          additionalProperties:
            type: string
    Daf:
      type: object
      description: |-
        A Donor-Advised Fund, or `DAF` for short, is a special-purpose, tax-advantaged charitable account.
        For more information, please see the [IRS website](https://www.irs.gov/charities-non-profits/charitable-organizations/donor-advised-funds) for a full description.
        In the case that a DAF is supported, a donor will be able to initiate a grant directly through DAFpay.
      required:
        - id
        - orgName
        - address
        - address2
        - city
        - state
        - zip
        - supported
        - minimumGrantAmount
        - institutionDown
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for this object.
          example: 0bf40881-8ee2-47fb-98ca-f58c7999aa34
        orgName:
          type: string
          readOnly: true
          description: A human readable name for the DAF.
          example: website
        address:
          type: string
          readOnly: true
          description: The first address line.
          example: 123 Main St.
        address2:
          type: string
          readOnly: true
          description: The second address line.
          example: Apt 100
        city:
          type: string
          readOnly: true
          description: The city name for the address.
          example: New York City
        state:
          type: string
          readOnly: true
          description: The state name for the address.
          example: New York
        zip:
          type: string
          readOnly: true
          description: The zipcode for the address.
          example: "12345"
        supported:
          type: boolean
          readOnly: true
          description: A flag to indicate if this DAF is supported by DAFpay.
          example: false
        minimumGrantAmount:
          type: number
          readOnly: true
          description: The minimum grant amount in cents allowed for this DAF.
          example: 5000
        institutionDown:
          type: boolean
          readOnly: true
          description: A flag to indicate if the institution is down.
          example: false
    Grant:
      type: object
      description: |-
        A Grant represents a successfully initiated grant request with a Donor Advised Fund. Grants are created when a person interacts with an instance of Chariot Connect and successfully submits a grant and completes the workflow. There can be many grants associated with a Connect object and therefore a nonprofit.
      required:
        - id
        - workflowSessionId
        - fundId
        - amount
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object
          format: uuid
          example: cfe09e64-6a74-4dab-a565-361185a6f248
        userFriendlyId:
          type: string
          readOnly: true
          description: Often referred to as the "Chariot ID", this is the ID that will be included in the payment from the DAF provider.
          example: chariot-1234455
          deprecated: true
        trackingId:
          type: string
          readOnly: true
          description: The tracking ID for the grant
          example: L9E182VBGP
        workflowSessionId:
          type: string
          readOnly: true
          description: ID of the Connect Workflow Session associated with this grant
          format: uuid
          example: 2d4b2a43-a5b4-4be1-ad1f-f932016ca4a6
        fundId:
          type: string
          readOnly: true
          description: ID of the donor advised fund
          example: daf-id
        externalGrantId:
          type: string
          description: ID of the grant associated with the donor advised fund
          example: 897823sdjf8sfjs
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created; expressed in ISO 8601 format
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated; expressed in ISO 8601 format
          example: "2021-07-11 15:34:00.000"
        amount:
          type: number
          format: integer
          description: The grant amount expressed in units of whole cents
          example: 15000
        status:
          type: string
          description: The status of the grant
          example: Initiated
        feeDetail:
          type: object
          readOnly: true
          description: The fee detail of the grant
          properties:
            total:
              type: number
              format: integer
              description: The total fee amount expressed in units of cents
              example: 1500
            contributions:
              type: array
              items:
                $ref: "#/components/schemas/ContributionFeeDetail"
              description: The list of fee contributions for this grant
        metadata:
          type: object
          description: A map of arbitrary string keys and values to store information about the object
          additionalProperties:
            type: string
        firstName:
          type: string
          description: The donor's first name
          example: "Warren"
        lastName:
          type: string
          description: The donor's last name
          example: "Buffet"
        phone:
          type: string
          description: The donor's phone number
          example: "1237861020"
        email:
          type: string
          description: The donor's email
          example: "warrenBuffet@example.com"
        note:
          type: string
          description: An note inputted by the user at submisson
          example: "Please dedicate in memory of grandma"
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/GrantStatus"
          description: The list of grant statuses for this grant
        paymentChannel:
          type: string
          readOnly: true
          description: |-
            The payment channel for the grant. This is useful to know how the grant will be sent.
            The payment channel will be one of the following:
            - dafpay_network: Grant will be sent to the DAFPay Network 501(c)(3) nonprofit organization (EIN: 93-1372175). The DAFPay Network will then review and process the grant and send the funds to the intended recipient.
            - direct: Grant will be sent directly to the intended recipient.
          enum:
            - dafpay_network
            - direct
          example: direct
        address:
          $ref: "#/components/schemas/GrantAddress"
    RecurringGrant:
      type: object
      description: |-
        A RecurringGrant represents a successfully initiated recurring grant request with a Donor Advised Fund.
        RecurringGrants are created when a person interacts with an instance of Chariot Connect and successfully submits a recurring grant and completes the workflow.
        On creation, each RecurringGrant object will also have a Grant object created to represent the first grant of the recurring grant.
        There can be many grants associated with the same recurring grant.
      required:
        - id
        - workflowSessionId
        - fundId
        - amount
        - frequency
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object
          format: uuid
          example: cfe09e64-6a74-4dab-a565-361185a6f248
        trackingId:
          type: string
          readOnly: true
          description: The tracking ID for the grant
          example: L9E182VBGP
        workflowSessionId:
          type: string
          readOnly: true
          description: ID of the Connect Workflow Session associated with this grant
          format: uuid
          example: 2d4b2a43-a5b4-4be1-ad1f-f932016ca4a6
        fundId:
          type: string
          readOnly: true
          description: ID of the donor advised fund
          example: daf-id
        frequency:
          type: string
          description: |-
            How often the DAF provider will submit the recurring grant. At the moment, monthly is the only supported frequency.
          enum:
            - MONTHLY
          example: MONTHLY
        externalGrantId:
          type: string
          description: ID of the grant associated with the donor advised fund
          example: 897823sdjf8sfjs
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created; expressed in ISO 8601 format
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated; expressed in ISO 8601 format
          example: "2021-07-11 15:34:00.000"
        amount:
          type: number
          format: integer
          description: The grant amount expressed in units of whole cents
          example: 15000
        firstName:
          type: string
          description: The donor's first name
          example: "Warren"
        lastName:
          type: string
          description: The donor's last name
          example: "Buffet"
        phone:
          type: string
          description: The donor's phone number
          example: "1237861020"
        email:
          type: string
          description: The donor's email
          example: "warrenBuffet@example.com"
        note:
          type: string
          description: An note inputted by the user at submisson
          example: "Please dedicate in memory of grandma"
        address:
          $ref: "#/components/schemas/GrantAddress"
    ContributionFeeDetail:
      type: object
      required:
        - name
        - amount
      properties:
        name:
          type: string
          description: |
            The name of the party charging the fee. This is an informational field.
            If you need to differentiate between fees charged by different parties, you should use the `feeType` field.
          example: "Chariot"
        amount:
          type: number
          format: integer
          description: The fee contribution amount expressed in units of cents
          example: 1500
        feeType:
          type: string
          description: |
            This indicates the source of a fee contribution.
              * chariot: Chariot's processing fee
              * daf: The DAF's processing fee
              * fundraising_application: The fundraising application's processing fee
          example: "chariot"
          enum:
            - chariot
            - daf
            - fundraising_application
    GrantStatus:
      type: object
      required:
        - id
        - createdAt
        - status
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object
          format: uuid
          example: cfe09e64-6a74-4dab-a565-361185a6f248
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created; expressed in ISO 8601 format
          example: "2020-07-10 15:00:00.000"
        status:
          type: string
          enum:
            - Initiated
            - Completed
            - Canceled
          description: |
            The status of the grant. To see a description of each status, see the "Grant Statuses" section of the Chariot documentation.
          example: Initiated
        comment:
          type: string
          description: The user comment for the update
          example: The grant has been received by the nonprofit
    UnintegratedGrant:
      type: object
      description: |-
        An Unintegrated Grant represents a grant requested through a provider that Chariot does not support.
        Unintegrated grants should be treated as donation intents as Chariot can not guarantee that the grant was submitted or will be fulfilled.
        Nonprofits should use the information provided in the unintegrated grant to follow up with the donor and/or the provider to check the status of the grant.
        These are sometimes refered to as "Manual Grants".
      required:
        - id
        - workflowSessionId
        - fundId
        - amount
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object
          format: uuid
          example: cfe09e64-6a74-4dab-a565-361185a6f248
        userFriendlyId:
          type: string
          readOnly: true
          description: Often refered to as the "Chariot ID", this is the ID that will be included in the payment from the DAF provider.
          example: "1234455"
          deprecated: true
        trackingId:
          type: string
          readOnly: true
          description: The tracking ID for the unintegrated grant
          example: L9E182VBGP
        workflowSessionId:
          type: string
          readOnly: true
          description: ID of the Connect Workflow Session associated with this grant
          format: uuid
          example: 2d4b2a43-a5b4-4be1-ad1f-f932016ca4a6
        fundId:
          type: string
          readOnly: true
          description: ID of the donor advised fund
          example: daf-id
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created; expressed in ISO 8601 format
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated; expressed in ISO 8601 format
          example: "2021-07-11 15:34:00.000"
        amount:
          type: number
          format: integer
          description: The grant amount expressed in units of whole cents
          example: 15000
        status:
          type: string
          description: |-
            The status of the unintegrated grant.
            To see a description of each status, see the "Unintegrated Grant Statuses" section of the Chariot documentation.
          enum:
            - Unknown
            - Initiated
            - Completed
            - Canceled
          example: Initiated
        metadata:
          type: object
          description: A map of arbitrary string keys and values to store information about the object
          additionalProperties:
            type: string
        firstName:
          type: string
          description: The donor's first name
          example: "Warren"
        lastName:
          type: string
          description: The donor's last name
          example: "Buffet"
        phone:
          type: string
          description: The donor's phone number
          example: "1237861020"
        email:
          type: string
          description: The donor's email
          example: "warrenBuffet@example.com"
        address:
          $ref: "#/components/schemas/GrantAddress"
        note:
          type: string
          description: An note inputted by the user at submisson
          example: "Please dedicate in memory of grandma"
        paymentChannel:
          type: string
          readOnly: true
          description: |-
            The payment channel for the unintegrated grant. This is useful to know how the grant will be sent.
            The payment channel for unintegrated grants will always be:
            - offline: Grant was initiated outside of Chariot so we're unable to confirm how the grant will be sent.
          enum:
            - offline
          example: offline
    FinancialAccount:
      type: object
      description: |-
        A financial account represents a financial, depository (bank) account managed by Chariot.
        Chariot maintains a ledger and balances for the account.
        This account should be funded and have a sufficient available balance before disbursements can be created.
        Chariot is a financial technology company, not a bank. Chariot Deposit Accounts come through our banking services partner, Column, N.A.
      required:
        - id
        - name
        - account_type
        - bank_provider
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: The unique identifier for the account
          example: "account_01jpjenf5q6cawy43yxfcrxhct"
        account_type:
          type: string
          description: The type of account
          enum:
            - disbursements
            - processing
          example: "disbursements"
        bank_provider:
          type: string
          description: The bank provider for the account
          example: "mock_alpha"
        created_at:
          type: string
          format: date-time
          description: The date and time the account was created
          example: "2020-07-10 15:00:00.000"
        updated_at:
          type: string
          format: date-time
          description: The date and time the account was last updated
          example: "2020-07-10 15:00:00.000"
    FinancialAccountBalance:
      type: object
      required:
        - current_balance
        - available_balance
        - timestamp
      properties:
        current_balance:
          type: number
          description: The current balance is the amount of money in the account. This value is in minor currency units (USD cents).
          example: 10000
        available_balance:
          type: number
          description: The available balance is the amount of money in the account that is available to be spent or transferred. This value is in minor currency units (USD cents).
          example: 10000
        timestamp:
          type: string
          format: date-time
          description: The time the balance was retrieved
          example: "2020-07-10 15:00:00.000"
    Address:
      type: object
      required:
        - city
        - country
        - line1
        - postal_code
        - state
      properties:
        city:
          type: string
          description: City, district, suburb, town, or village.
        country:
          type: string
          description: Two-letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        line1:
          type: string
          description: Address line 1 (e.g. street, PO Box, or company name)
        line2:
          type: string
          description: Address line 2 (e.g. apartment, suite, unit, or building)
        postal_code:
          type: string
          description: ZIP or postal code
        state:
          type: string
          description: State, county, province, or region
    GrantAddress:
      type: object
      properties:
        line1:
          type: string
          description: "Address line 1 (e.g. street, PO Box, or company name). Maximum length: 255 characters."
        line2:
          type: string
          description: "Address line 2 (e.g. apartment, suite, unit, or building). Maximum length: 255 characters."
        city:
          type: string
          description: "City, district, suburb, town, or village.. Maximum length: 255 characters."
        state:
          type: string
          description: "State, county, province, or region. Maximum length: 255 characters."
        postalCode:
          type: string
          description: "ZIP or postal code. Maximum length: 255 characters."
    PostalAddress:
      type: object
      description: |-
        A postal address is a mailing address where physical mail can be received.
        Postal addresses can be used to receive paper checks.
      required:
        - city
        - country
        - line1
        - postal_code
        - state
      properties:
        city:
          type: string
          description: City, district, suburb, town, or village.
        country:
          type: string
          description: Two-letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        line1:
          type: string
          description: Address line 1 (e.g. street, PO Box, or company name)
        line2:
          type: string
          description: Address line 2 (e.g. apartment, suite, unit, or building)
        postal_code:
          type: string
          description: ZIP or postal code
        state:
          type: string
          description: State, county, province, or region
    Disbursement:
      type: object
      description: A disbursement moves funds to a verified organization.
      required:
        - id
        - organization_id
        - amount
      properties:
        id:
          type: string
          description: The unique identifier for the disbursement
          example: "disbursement_01jpjen1s23s29kkmnjsb6fzga"
          readOnly: true
        organization_id:
          type: string
          description: The unique identifier for the organization that will receive the payment
          example: "org_01jpjenf5q6cawy43yxfcrxhct"
        amount:
          type: integer
          format: int64
          description: The payment amount in USD cents. Must be a positive amount.
          example: 10000
        description:
          type: string
          description: |
            A description of the disbursement that will be displayed to the receiving organization.
          example: "Disbursement to nonprofit"
        created_at:
          type: string
          format: date-time
          description: The date and time the disbursement was created
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: The date and time the disbursement was last updated
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        status:
          $ref: "#/components/schemas/DisbursementStatus"
        cancelation:
          $ref: "#/components/schemas/DisbursementCancelation"
        approval:
          $ref: "#/components/schemas/DisbursementApproval"
        rejection:
          $ref: "#/components/schemas/DisbursementRejection"
        submission:
          $ref: "#/components/schemas/DisbursementSubmission"
        transactions:
          type: array
          description: The list of transactions for the disbursement
          items:
            $ref: "#/components/schemas/Transaction"
    DisbursementStatus:
      type: string
      description: |-
        The lifecycle status of the disbursement.
        Possible values include:
          - `pending_approval`: The disbursement is awaiting approval from the grantmaker
          - `canceled`: The disbursement was canceled by the grantmaker
          - `awaiting_verification`: The disbursement is awaiting verification from Chariot
          - `rejected`: The disbursement was rejected by Chariot before being submitted
          - `pending_submission`: The disbursement is awaiting submission to the payment rail
          - `submitted`: The disbursement has been submitted to the payment rail

        To see a description of each status, see the "Disbursement Lifecycle" section of the Chariot documentation.
      example: "pending_approval"
      enum:
        - pending_approval
        - canceled
        - awaiting_verification
        - pending_submission
        - rejected
        - submitted
    DisbursementCancelation:
      type: object
      description: |-
        If your account requires approvals for disbursements and the disbursement was not approved, this will contain the details of the cancelation.
      properties:
        canceled_by:
          type: string
          description: If the disbursement was canceled by a user in the dashboard, the email address of that user.
          example: "user@example.com"
        canceled_at:
          type: string
          format: date-time
          description: The ISO 8601 date and time at which the Disbursement was canceled.
          example: "2020-07-10 15:00:00.000"
          readOnly: true
    DisbursementApproval:
      type: object
      description: |-
        If your account requires approvals for disbursements and the disbursement was approved, this will contain the details of the approval.
      properties:
        approved_by:
          type: string
          description: If the disbursement was approved by a user in the dashboard, the email address of that user.
          example: "user@example.com"
        approved_at:
          type: string
          format: date-time
          description: The ISO 8601 date and time at which the Disbursement was approved.
          example: "2020-07-10 15:00:00.000"
          readOnly: true
    DisbursementRejection:
      type: object
      description: |-
        If the disbursement was rejected by Chariot, this will contain details as to why the disbursement was rejected.
      properties:
        reason:
          type: string
          description: |-
            Why the disbursement was rejected.
            Possible values include:
              - `insufficient_funds`: The disbursement was rejected because the grantmaker does not have enough funds in their account.
              - `incorrect_recipient`: The disbursement was rejected because the recipient or address was incorrect.
              - `suspected_fraud`: The disbursement was suspected to be fraudulent.
              - `requested_by_user`: The disbursement was rejected at the request of the grantmaker.
              - `acceptance_criteria_failed`: The disbursement was rejected because the disbursement did not meet the acceptance criteria for the receiving organization.
              - `duplicate`: The disbursement was rejected because the disbursement was a duplicate.
              - `unknown`: The disbursement was rejected for an unknown reason.
          example: "insufficient_funds"
          enum:
            - insufficient_funds
            - incorrect_recipient
            - suspected_fraud
            - requested_by_user
            - acceptance_criteria_failed
            - duplicate
            - unknown
        rejected_at:
          type: string
          format: date-time
          description: The ISO 8601 date and time at which the Disbursement was rejected.
          example: "2020-07-10 15:00:00.000"
          readOnly: true
    DisbursementSubmission:
      type: object
      description: |-
        After a disbursement is submitted, this object contains additional details about the disbursement payment.
        This is useful if you want to track the disbursement over the specific payment rails/networks.
      properties:
        account_transfer:
          $ref: "#/components/schemas/AccountTransferSubmission"
        ach_transfer:
          $ref: "#/components/schemas/AchTransferSubmission"
        check_transfer:
          $ref: "#/components/schemas/CheckTransferSubmission"
    AccountTransferSubmission:
      type: object
      description: |-
        An account transfer submission references an account transfer which is an instant, electronic transfer of funds to the receiving organization.
        This is the preferred transfer method when the receiving organization has a Chariot account at the same bank as the grantmaker.
      properties:
        id:
          type: string
          description: The unique identifier for the account transfer
          example: "account_transfer_01j8rs605a4gctmbm58d87mvsj"
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time the account transfer was created.
          example: "2020-07-10 15:00:00.000"
    AchTransferSubmission:
      type: object
      description: |-
        An ACH transfer submission references an electronic transfer of funds via the Automated Clearing House (ACH) payment network.
        This is the transfer method used when the receiving organization has a Chariot account at a different bank than the grantmaker.
      properties:
        id:
          type: string
          description: The unique identifier for the ACH transfer
          example: "ach_transfer_01j8rs605a4gctmbm58d87mvsj"
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time the ACH transfer was created.
          example: "2020-07-10 15:00:00.000"
    CheckTransferSubmission:
      type: object
      description: |-
        A check transfer submission references a physical check that is will be mailed to the receiving organization.
        This is the transfer method used when the receiving organization does not have a Chariot account.
      properties:
        id:
          type: string
          description: The unique identifier for the check
          example: "check_transfer_01j8rs605a4gctmbm58d87mvsj"
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time the check transfer was created.
          example: "2020-07-10 15:00:00.000"
    AccountTransfer:
      type: object
      description: |-
        An account transfer represents an instant, electronic transfer of funds to the receiving organization.
        This is the preferred transfer method when the receiving organization has a Chariot account at the same bank as the grantmaker.
      required:
        - id
        - amount
        - created_at
      properties:
        id:
          type: string
          description: The unique identifier for the account transfer
          example: "account_transfer_01j8rs605a4gctmbm58d87mvsj"
          readOnly: true
        amount:
          type: integer
          format: int64
          description: The amount of the account transfer in minor currency units (cents)
          example: 10000
        created_at:
          type: string
          format: date-time
          description: The date and time the account transfer was created
          example: "2020-07-10 15:00:00.000"
          readOnly: true
    AchTransfer:
      type: object
      description: |-
        An ACH transfer represents an electronic transfer of funds via the Automated Clearing House (ACH) payment network.
        This is the transfer method used when the receiving organization has a Chariot account at a different bank than the grantmaker.
      required:
        - id
        - amount
        - status
        - created_at
      properties:
        id:
          type: string
          description: The unique identifier for the ACH transfer
          example: "ach_transfer_01j8rs605a4gctmbm58d87mvsj"
          readOnly: true
        amount:
          type: integer
          format: int64
          description: The amount of the ACH transfer in minor currency units (cents)
          example: 10000
        status:
          type: string
          description: |-
            The lifecycle status of the ACH transfer.
            Possible values include:
              - `initiated`: The ACH transfer has been initiated and is pending submission to the Federal Reserve.
              - `submitted`: The ACH transfer has been submitted to the Federal Reserve.
              - `rejected`: The ACH transfer was rejected.
              - `returned`: The ACH transfer was returned by the receiving organization.
          example: "pending"
          enum:
            - initiated
            - pending
            - submitted
            - rejected
            - returned
        trace_number:
          type: string
          description: |-
            A 15 digit number recorded in the Nacha file and transmitted to the receiving bank.
            Along with the amount, date, and originating routing number, this can be used to identify the ACH transfer at the receiving bank.
            ACH trace numbers are not unique, but are used to correlate returns.
          example: "012345678901234"
        effective_date:
          type: string
          format: date-time
          description: |-
            The ACH transfer's effective date as sent to the Federal Reserve.
            This is the date the funds will be available to the receiving organization.
          example: "2020-07-10 15:00:00.000"
        created_at:
          type: string
          format: date-time
          description: The date and time the ACH transfer was created
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: The date and time the ACH transfer was last updated
          example: "2020-07-10 15:00:00.000"
          readOnly: true
    CheckTransfer:
      type: object
      description: |-
        A check transfer represents a paper check that is sent to the receiving organization.
        This is the transfer method used when the receiving organization does not have a Chariot account.
      required:
        - id
        - amount
        - status
        - mailing_address
        - memo
        - created_at
      properties:
        id:
          type: string
          description: The unique identifier for the check transfer
          example: "check_transfer_01j8rs605a4gctmbm58d87mvsj"
          readOnly: true
        amount:
          type: integer
          format: int64
          description: The amount of the check transfer in minor currency units (cents)
          example: 10000
        status:
          type: string
          description: |-
            The lifecycle status of the check.
            The set of statuses include:
              - `pending`: The check is pending review by Chariot.
              - `canceled`: The check has been canceled.
              - `issued`: The check has been mailed and is pending delivery.
              - `rejected`: The check was rejected by Chariot.
              - `deposited`: The check has been deposited by the receiving organization.
              - `stopped`: A stop payment was requested on the check.
              - `returned`: The check has been returned by the receiving organization.

            To see a more detailed description of each status and the overall lifecycle of check disbursements,
            see the "Transfer Statuses" section of the Chariot documentation.
          example: "issued"
          enum:
            - pending
            - canceled
            - issued
            - rejected
            - deposited
            - stopped
            - returned
        memo:
          type: string
          description: The memo on the check
          example: "Disbursement to nonprofit"
        check_number:
          type: string
          description: The check number
          example: "123456789"
        mailing_address:
          $ref: "#/components/schemas/PostalAddress"
        tracking_updates:
          type: array
          description: The list of tracking updates for the check
          items:
            $ref: "#/components/schemas/TrackingUpdate"
        submitted_at:
          type: string
          format: date-time
          description: The date and time the check was submitted to the carrier.
          example: "2020-07-10 15:00:00.000"
        canceled_at:
          type: string
          format: date-time
          description: The date and time the check was canceled.
          example: "2020-07-10 15:00:00.000"
        stopped_at:
          type: string
          format: date-time
          description: The date and time the check was stopped.
          example: "2020-07-10 15:00:00.000"
        deposited_at:
          type: string
          format: date-time
          description: The date and time the check was deposited.
          example: "2020-07-10 15:00:00.000"
        created_at:
          type: string
          format: date-time
          description: The date and time the check transfer was created
          example: "2020-07-10 15:00:00.000"
        updated_at:
          type: string
          format: date-time
          description: The date and time the check transfer was last updated
          example: "2020-07-10 15:00:00.000"
    TrackingUpdate:
      type: object
      description: The tracking update for the check
      required:
        - category
        - created_at
      properties:
        category:
          type: string
          description: |-
            The category of the tracking update.
            The set of categories include:
              - `in_transit`: The check has been processed by the origin facility.
              - `processed_for_delivery`: The check has been greenlit for delivery at the recipient's nearest postal facility. The check should reach the mailbox within 1-2 business days of this tracking update.
              - `delivered`: The check has been delivered to the recipient's address.
              - `returned_to_sender`: The check has been returned to the sender due to barcode, ID tag area, or address errors.
          example: "in_transit"
          enum:
            - in_transit
            - processed_for_delivery
            - delivered
            - returned_to_sender
        created_at:
          type: string
          format: date-time
          description: The date and time the tracking update was created
          example: "2020-07-10 15:00:00.000"
    StopCheckTransferPaymentReason:
      type: string
      description: |-
        The reason for stopping a check transfer payment.
        Possible values include:
          - `mail_delivery_failure`: The check could not be delivered.
          - `not_authorized`: The check was not authorized.
          - `voided`: The check was stopped and voided.
          - `unknown`: The reason for stopping the check transfer is unknown.
      example: "mail_delivery_failure"
      enum:
        - mail_delivery_failure
        - not_authorized
        - voided
        - unknown
    Transaction:
      type: object
      description: |
        A transaction represents an individual line-item or donation for a recipient nonprofit organization.
      required:
        - organization_id
        - amount
        - type
      properties:
        id:
          type: string
          description: The unique identifier for the transaction
          example: "txn_1LaXpKGUcADgqoEMl0Cx0Ygg"
          readOnly: true
        organization_id:
          type: string
          description: The identifier for the organization that will receive the transaction
          example: "org_01j8rs605a4gctmbm58d87mvsj"
        amount:
          type: integer
          format: int64
          description: The transaction amount in minor currency units (cents)
          example: 10000
        description:
          type: string
          description: |
            A description of the transaction.
            This description is displayed to the receiving organization.
          example: "Disbursement to nonprofit"
        type:
          $ref: "#/components/schemas/DonationType"
        donor_advised_fund_grant:
          $ref: "#/components/schemas/DonorAdvisedFundGrant"
        created_at:
          type: string
          format: date-time
          description: The date and time the transaction was created
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: The date and time the transaction was last updated
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        metadata:
          type: object
          description: Additional metadata for the transaction
          additionalProperties:
            type: string
    DonationType:
      type: string
      description: The type of donation
      enum:
        - donor_advised_fund_grant
        # Can be added back in once we have a use case to disburse corporate matches or qualified charitable distributions
        # - corporate_match
        # - qualified_charitable_distribution
    DonorAdvisedFundGrant:
      type: object
      description: A donor-advised fund grant is a charitable donation made by a donor-advised fund (DAF) on behalf of the donor.
      properties:
        organization_name:
          type: string
          description: The name of the DAF organization that made the grant
          example: "Vanguard Charitable"
        fund_name:
          type: string
          description: The name of the DAF fund that made the grant
          example: "John Doe Fund"
        purpose:
          type: string
          description: The purpose of the grant
          example: "General Operating Support"
        note:
          type: string
          description: A note about the grant
          example: "This grant is for the general operating support of the organization."
        donors:
          type: array
          description: The list of donors for the transaction
          items:
            $ref: "#/components/schemas/Donor"
    Donor:
      type: object
      description: The donor information for the transaction
      properties:
        first_name:
          type: string
          description: The first name of the donor
          example: "John"
        last_name:
          type: string
          description: The last name of the donor
          example: "Doe"
        email:
          type: string
          description: The email address of the donor
          example: "bob@me.com"
        phone:
          type: string
          description: The phone number of the donor
          example: "415-555-1212"
        address:
          $ref: "#/components/schemas/Address"
    EventCategory:
      type: string
      description: |
        The category of the event. This is useful for filtering events.
      enum:
        - "grant.created"
        - "grant.updated"
        - "unintegrated_grant.created"
        - "unintegrated_grant.updated"
        - "disbursement.created"
        - "disbursement.updated"
        - "account_transfer.created"
        - "account_transfer.updated"
        - "ach_transfer.created"
        - "ach_transfer.updated"
        - "check_transfer.created"
        - "check_transfer.updated"
    Event:
      type: object
      description: |
        Events are records of things that happened to objects at Chariot.
      properties:
        id:
          type: string
          description: The unique identifier for the event
          example: "203c4e56-5c39-4a66-abcd-2ec8af99a1b9"
          readOnly: true
        category:
          $ref: "#/components/schemas/EventCategory"
        created_at:
          type: string
          format: date-time
          description: The date and time the event was created
          example: "2024-01-19T18:48:56.37Z"
          readOnly: true
        associated_object_id:
          type: string
          description: The unique identifier for the associated object
          example: "4d06d393-1f14-46cf-b02d-8db17d7ed06a"
          readOnly: true
        associated_object_type:
          type: string
          description: The type of the associated object
          example: "grant"
          readOnly: true
    EventSubscriptionStatus:
      type: string
      description: |-
        The status of the event subscription.
        This indicates if we'll send notifications to this subscription
          * active: subscription is active and events will be delivered normally
          * disabled: subscription is temporarily disabled and events will not be delivered
          * deleted: subscription has been deleted and events will not be delivered
          * requires_attention: subscription has been disabled due to delivery failures and events will not be delivered
      enum:
        - "active"
        - "disabled"
        - "deleted"
        - "requires_attention"
    EventSubscription:
      type: object
      description: |
        Webhooks are event notifications we send to you by HTTPS POST requests.
        Event Subscriptions are how you configure your application to listen for them.
      required:
        - url
      properties:
        id:
          type: string
          description: The unique identifier for the event subscription
          example: "4d06d393-1f14-46cf-b02d-8db17d7ed06a"
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time the event subscription was created
          example: "2024-01-14T12:48:56.37Z"
          readOnly: true
        status:
          $ref: "#/components/schemas/EventSubscriptionStatus"
        url:
          type: string
          description: The webhook url where we'll send notifications.
          example: "https://example.com/webhook"
        category:
          $ref: "#/components/schemas/EventCategory"
    Paging:
      type: object
      description: The paging information
      properties:
        next_page_token:
          type: string
          description: The token to use for pagination. If not set, the first page of results will be returned.
          example: "eyJpZCI6IjEyMzQ1Njc4OTAiLCJ0aW1lc3RhbXAiOiIyMDIwLTA3LTEwIDE1OjAwOjAwLjAwMCJ9"
        total:
          type: integer
    Error:
      type: object
      required:
        - timestamp
        - code
        - error
        - message
      properties:
        timestamp:
          type: string
          description: time when the error was reported. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        code:
          type: number
          description: HTTP status code of the error
          example: 400
        error:
          type: string
          description: A short name of the error; usually the HTTP status.
          example: Bad Request
        message:
          type: string
          description: The description of the error
          example: Expected an API key to be provided in the header `x-chariot-api-key`
  headers:
    X-Request-Id:
      description: The unique identifier for the request
      schema:
        type: string
    Location:
      description: The URI of the created object
      schema:
        type: string
  requestBodies:
    GrantCaptureRequest:
      description: |-
        The request to create and submit a grant. This is useful to capture a grant intent associated with DAFpay workflow session.
        The request should specify the grant amount. This is the amount submitted for processing by the DAF.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - workflowSessionId
              - amount
            properties:
              workflowSessionId:
                type: string
                description: |-
                  The identifier of the donor's DAFpay Workflow Session.
                  See [Capturing Grant Intents](/guides/dafpay/integrating-dafpay/integration#capturing-grant-intents) for how to get this value from the DAFpay `CHARIOT_SUCCESS` event.
              amount:
                type: number
                example: 15000
                description: |-
                  The grant amount in cents that will be processed by Chariot and submitted to the DAF.
                  This amount must be in whole dollar increments (rounded to the nearest hundred) as currently
                  all DAFs only accept whole dollar grant amounts.
              applicationFeeAmount:
                type: number
                example: 3000
                description: |-
                  This parameter specifies the fee your platform plans to take from the grant in cents.
                  This is a fee in addition to Chariot's processing fee. With application fees,
                  Chariot collects the fee you determine from the nonprofit and passes it to your platform.
                  Please note that platform fees are only taken when the grant is successfully received by the nonprofit.
                  The sum of Chariot's fee and the applicationFeeAmount cannot exceed 5% of the grant's amount.
                  If the fee limit is exceeded, a `400 Bad Request` error will be returned.
              donor:
                type: object
                properties:
                  firstName:
                    type: string
                    description: "The first name of the donor. Maximum length: 255 characters."
                  lastName:
                    type: string
                    description: "The last name of the donor. Maximum length: 255 characters."
                  email:
                    type: string
                    description: "The email address of the donor. Maximum length: 255 characters."
                  phone:
                    type: string
                    description: "The phone number of the donor. Maximum length: 255 characters."
                  address:
                    $ref: "#/components/schemas/GrantAddress"
              note:
                type: string
                description: |-
                  A note the donor wants to send to the nonprofit. Maximum length: 400 characters.
              designation:
                type: string
                description: |-
                  The designation to include on the grant. If this is left blank, "Where needed most" will be used.
                  Note that including a custom designation may cause the grant approval process to take longer.
                  Maximum length: 100 characters.
    UpdateGrantRequest:
      description: |-
        The request to update a grant. This is useful to update the status of a grant.
        The request should specify the grant status.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: |-
                  The status of the grant:
                    * Initiated: The grant has been initiated and is ready to be processed
                    * Completed: The grant has been completed
                enum:
                  - "Initiated"
                  - "Completed"
                example: "Completed"
              acknowledgedAt:
                type: string
                format: date-time
                description: |-
                  The date and time the grant was acknowledged by the nonprofit.
                  This is useful for nonprofits to indicate when they have received and processed the grant.
                  Expressed in ISO 8601 format.
                example: "2020-07-10 15:00:00.000"
    RecurringGrantCaptureRequest:
      description: |-
        The request to create and submit a monthly recurring grant. This is useful to capture a recurring grant intent associated with Connect workflow session.
        The request should specify the grant amount. The grant will re-occur according to the scheduled frequency or recurrence of the request.
        The recurring grant will continue indefinitely until the donor runs out of funds or until the donor cancels the recurring grant with their DAF provider.
        Some DAF providers require an end-date or number of payments in order to create a recurring grant.
        In most cases, the recurring grant will continue indefinitely until the donor's account runs out of funds or until the donor cancels the recurring grant with their DAF provider.
        Some DAF providers require an explicit bound to the time period or the number of payments in which case currently we opt for the longest recurring donation timeline possible.
        For example, if the DAF provider allows recurring donations to continue for up to 10 years we will submit the request as such.
        This is the amount submitted for processing by the DAF.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - workflowSessionId
              - amount
              - frequency
            properties:
              workflowSessionId:
                type: string
                description: |-
                  The identifier of the donor's DAFpay Workflow Session.
                  See [Capturing Grant Intents](/guides/dafpay/integrating-dafpay/integration#capturing-grant-intents) for how to get this value from the DAFpay `CHARIOT_SUCCESS` event.
              frequency:
                type: string
                description: |-
                  The recurrence interval schedule for the recurring grant. Currently, only `MONTHLY` is supported.
                enum:
                  - MONTHLY
                example: MONTHLY
              amount:
                type: number
                example: 15000
                description: |-
                  The final grant amount in cents that will be processed by Chariot and submitted to the DAF for recurring gifts.
                  This amount must be in whole dollar increments (rounded to the nearest hundred) as currently
                  all DAFs only accept whole dollar grants.
              applicationFeeAmount:
                type: number
                example: 3000
                description: |-
                  This parameter specifies the fee your platform plans to take from the first grant in cents.
                  This is a fee in addition to Chariot's processing fee. With application fees,
                  Chariot collects the fee you determine from the nonprofit and passes it to your platform.
                  Please note that platform fees are only taken when the grant is successfully received by the nonprofit.
                  The sum of Chariot's fee and the applicationFeeAmount cannot exceed 5% of the grant's amount.
                  If the 5% limit is exceeded, a 400 error will be returned.
              donor:
                type: object
                properties:
                  firstName:
                    type: string
                    description: "The first name of the donor. Maximum length: 255 characters."
                  lastName:
                    type: string
                    description: "The last name of the donor. Maximum length: 255 characters."
                  email:
                    type: string
                    description: "The email address of the donor. Maximum length: 255 characters."
                  phone:
                    type: string
                    description: "The phone number of the donor. Maximum length: 255 characters."
                  address:
                    $ref: "#/components/schemas/GrantAddress"
              note:
                type: string
                description: |-
                  A note the donor wants to send to the nonprofit. Maximum length: 400 characters.
              designation:
                type: string
                description: |-
                  The designation to include on the grant. If this is left blank, "Where needed most" will be used.
                  Note that including a custom designation may cause the grant approval process to take longer.
                  Designations over 100 characters will be truncated.
    CreateConnectRequest:
      description: |-
        The request to create a new Connect object for a nonprofit.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - organization_id
              - contact
            properties:
              organization_id:
                type: string
                description: The unique identifier for the organization
                example: "org_1234567890"
              contact:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
                    description: The email address for the nonprofit account contact
                    example: ben.give@co.com
                  phone:
                    type: string
                    description: The phone number for the nonprofit account contact
                    example: "9127772424"
                  first_name:
                    type: string
                    description: The first name of the nonprofit account contact that manages this Connect
                    example: Ben
                  last_name:
                    type: string
                    description: The last name of the nonprofit account contact that manages this Connect
                    example: Give
              name:
                type: string
                description: |-
                  A human readable name of the Connect, optional.
              metadata:
                type: object
                description: A map of arbitrary string keys and values to store information about the object.
                additionalProperties:
                  type: string
    CreateDisbursementRequest:
      description: |-
        The request to create a disbursement and its corresponding transactions.
        The organization and amount are required.
        The transactions array should contain the list of transactions associated with the disbursement. The amounts
        in the transactions should sum up to the disbursement amount.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - organization_id
              - amount
              - transactions
            properties:
              organization_id:
                type: string
                description: The ID of the organization that will receive the disbursement.
                example: "org_1234567890"
              amount:
                type: integer
                format: int64
                description: The disbursement amount in USD cents. Must be a positive amount.
                example: 10000
              description:
                type: string
                description: |-
                  A description of the disbursement that will be displayed to the receiving organization.
                example: "Disbursement to nonprofit"
              transactions:
                type: array
                description: |-
                  The list of transactions associated with the disbursement.
                  Each transaction is an individual donation to be included in the disbursement.
                  Must specify at least one transaction.
                items:
                  type: object
                  description: |
                    An individual donation to be included in the disbursement.
                  required:
                    - amount
                    - type
                  properties:
                    amount:
                      type: integer
                      format: int64
                      description: The transaction amount in minor currency units (cents)
                      example: 10000
                    description:
                      type: string
                      description: |
                        A description of the donation.
                        This description is displayed to the receiving organization.
                      example: "Donation to nonprofit"
                    type:
                      $ref: "#/components/schemas/DonationType"
                    donor_advised_fund_grant:
                      $ref: "#/components/schemas/DonorAdvisedFundGrant"
                    # TODO: we don't have the ability to create files yet, so leaving this out for now
                    # attachment_file_id:
                    #   type: string
                    #   description: |-
                    #     The unique identifier for the file that is attached to the transaction.
                    #     This is useful if you want to attach a letter or another document to the transaction.
                    #   example: "file_1LaXpKGUcADgqoEMl0Cx0Ygg"
                    metadata:
                      type: object
                      description: Additional metadata for the transaction
                      additionalProperties:
                        type: string
          examples:
            MultipleTransactions:
              summary: Disbursement with multiple transactions
              value:
                organization_id: "org_01j8rs605a4gctmbm58d87mvsj"
                amount: 25000
                description: "February 2025 Disbursement"
                transactions:
                  [
                    {
                      amount: 15000,
                      description: "Grant from Doe Family Fund",
                      type: "donor_advised_fund_grant",
                      donor_advised_fund_grant:
                        {
                          organization_name: "Miami Charitable",
                          fund_name: "Doe Family Charitable Fund",
                          purpose: "General Operating Support",
                          donors:
                            [
                              {
                                first_name: "Jane",
                                last_name: "Doe",
                                email: "jane.doe@example.com",
                              },
                            ],
                        },
                    },
                    {
                      amount: 10000,
                      description: "Grant from Smith Family Fund",
                      type: "donor_advised_fund_grant",
                      donor_advised_fund_grant:
                        {
                          organization_name: "LA Charitable",
                          fund_name: "Smith Family Legacy Fund",
                          purpose: "Program Support",
                          donors:
                            [
                              {
                                first_name: "John",
                                last_name: "Smith",
                                email: "john.smith@example.com",
                              },
                            ],
                        },
                    },
                  ]
    StopCheckTransferRequest:
      description: The request body for stopping a check transfer
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - reason
            properties:
              reason:
                $ref: "#/components/schemas/StopCheckTransferPaymentReason"
    CreateEventSubscriptionRequest:
      description: The request body for creating an event subscription
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - url
              - category
            properties:
              url:
                type: string
                description: The webhook url where we'll send notifications.
                example: "https://example.com/webhook"
              category:
                $ref: "#/components/schemas/EventCategory"
              signingSecret:
                type: string
                description: |-
                  The key that will be used to sign webhooks.
                  If no value is passed, a random string will be used as default.
                  This is necessary to verify that the webhook is coming from Chariot.
                  While this parameter is optional, it is highly recommended to pass a value
                  for the secret and implement webhook signature verification.
    UpdateEventSubscriptionRequest:
      description: The request body for creating an event subscription
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: |-
                  The status of the event subscription:
                    * active: The event subscription is active and events will be delivered
                    * disabled: The event subscription is temporarily disabled and events will not be delivered
                    * deleted: The event subscription is permanently deleted and events will not be delivered
                enum:
                  - "active"
                  - "disabled"
                  - "deleted"
    CreateSimulatedInboundAchTransferRequest:
      description: The request body for creating a simulated inbound ACH transfer
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - amount
              - account_id
            properties:
              amount:
                type: number
                description: The amount of the transfer in cents. Only positive values are allowed.
                example: 10000
              account_id:
                type: string
                description: The identifier of the financial account that will receive the transfer
                example: "account_01jpjenf5q6cawy43yxfcrxhct"
  responses:
    ListFinancialAccountsResponse:
      description: The response for FinancialAccounts.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/FinancialAccount"
    ListDafsResponse:
      description: The response for Dafs.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Daf"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only substituting the pageToken with this value). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "0bf40881-8ee2-47fb-98ca-f58c7999aa34"
                    orgName: "National Philanthropic Trust"
                    address: "123 Main St."
                    address2: "Apt 100"
                    city: "New York"
                    state: "NY"
                    zip: "12345"
                    supported: true
                    minimumGrantAmount: 5000
                    institutionDown: false
                nextPageToken: "c3f685f2-2dda-4956-815b-39867a5e5638"
            NoMoreResults:
              value:
                results:
                  - id: "0bf40881-8ee2-47fb-98ca-f58c7999aa34"
                    orgName: "National Philanthropic Trust"
                    address: "123 Main St."
                    address2: "Apt 100"
                    city: "New York"
                    state: "NY"
                    zip: "12345"
                    supported: true
                    minimumGrantAmount: 5000
                    institutionDown: false
    ListGrantsResponse:
      description: The response for Grants.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Grant"
              nextPageToken:
                type: string
                nullable: true
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only changing the pageToken). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "1e60800e-849b-43d1-870e-57afc8d75473"
                    workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 15:00:00.000"
                    updatedAt: "2021-08-11 15:34:00.000"
                    amount: 15000
                    status: "Initiated"
                nextPageToken: "c3f685f2-2dda-4956-815b-39867a5e5638"
            NoMoreResults:
              value:
                results:
                  - id: "1e60800e-849b-43d1-870e-57afc8d75473"
                    workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 15:00:00.000"
                    updatedAt: "2021-08-11 15:34:00.000"
                    amount: 20000
                    status: "Received"
                nextPageToken: null
    ListRecurringGrantsResponse:
      description: The response for RecurringGrants.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/RecurringGrant"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only changing the pageToken). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "29650c10-1eb3-4f97-a63e-f2e41c145b53"
                    workflowSessionId: "b76fa69f-c554-43b2-af9a-1d4bb9a02016"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 15:00:00.000"
                    updatedAt: "2021-08-11 15:34:00.000"
                    amount: 15000
                    frequency: MONTHLY
                nextPageToken: "c3f685f2-2dda-4956-815b-39867a5e5638"
            NoMoreResults:
              value:
                results:
                  - id: "579e2864-d65a-4a21-a056-1c91d0a95b5c"
                    workflowSessionId: "ee27b65b-22f5-42fa-b966-0f83cac8fd2c"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 16:00:00.000"
                    updatedAt: "2021-08-11 15:25:00.000"
                    amount: 20000
                    frequency: MONTHLY
    ListUnintegratedGrantsResponse:
      description: The response for UnintegratedGrants.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/UnintegratedGrant"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call
                   to the same endpoint with the same parameters (only changing the pageToken). If
                   specified, then more results exist on the server that were not returned, otherwise
                   no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "1e60800e-849b-43d1-870e-57afc8d75473"
                    workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 15:00:00.000"
                    updatedAt: "2021-08-11 15:34:00.000"
                    amount: 15000
                nextPageToken: "c3f685f2-2dda-4956-815b-39867a5e5638"
            NoMoreResults:
              value:
                results:
                  - id: "1e60800e-849b-43d1-870e-57afc8d75473"
                    workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 15:00:00.000"
                    updatedAt: "2021-08-11 15:34:00.000"
                    amount: 20000
    ListEventsResponse:
      description: The response for Events.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call
                   to the same endpoint with the same parameters (only changing the pageToken). If
                   specified, then more results exist on the server that were not returned, otherwise
                   no more results exist on the server.
    ListEventSubscriptionsResponse:
      description: The response for Events.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/EventSubscription"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call
                   to the same endpoint with the same parameters (only changing the pageToken). If
                   specified, then more results exist on the server that were not returned, otherwise
                   no more results exist on the server.
    SearchOrganizationsResponse:
      description: The response for Organizations.search
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/OrganizationSummary"
    ListDisbursementsResponse:
      description: The response for Disbursements.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Disbursement"
              next_page_token:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call
                   to the same endpoint with the same parameters (only changing the pageToken). If
                   specified, then more results exist on the server that were not returned, otherwise
    BadRequestError:
      description: The request is invalid or contains invalid parameters
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 400
            error: "Bad Request"
            message: "Expected an API key to be provided in the header `x-chariot-api-key`"
    AuthenticationError:
      description: Unauthorized. The request is missing the security (OAuth2 Bearer token) requirements and the server is unable to verify the identify of the caller.
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 401
            error: "Unauthorized"
            message: "Unauthorized"
    ForbiddenError:
      description: Access denied
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 403
            error: "Forbidden"
            message: "User is not allowed to access this resource"
    NotFoundError:
      description: Resource Not Found
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 404
            error: "Not Found"
            message: "Resource is not found"
    ConflictError:
      description: Resource Conflicts
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 409
            error: "Conflict"
            message: "Request conflicts with an already existing resource"
    GoneError:
      description: Resource Gone or Expired
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 410
            error: "Gone"
            message: "The resource has expired"
    PreconditionFailedError:
      description: Precondition Failed
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 412
            error: "Precondition Failed"
            message: "The requested action has a failed precondition"
    InternalServerError:
      description: Internal Server Error
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 500
            error: "Internal server error"
            message: "The server encountered an error processing your request"
  examples:
    NonprofitRedCross:
      summary: American Red Cross
      value:
        id: "021cf6aa-cb91-4b92-ae03-82a211cc8328"
        name: "American Red Cross"
        ein: "530196605"
        createdAt: "2021-07-10 15:00:00.000"
        updatedAt: "2021-07-11 15:34:00.000"
        isDafPayNetwork: false
        inGoodStanding: true
    ConnectOutput:
      summary: Simple connect output
      value:
        id: "test_de5a2e7d-c960-4eaa-8bd2-e8d2cc5b1a55"
        name: "website"
        apiKey: "test_98235982835"
        active: true
        createdAt: "2021-07-10 15:00:00.000"
        updatedAt: "2021-07-11 15:34:00.000"
        createdBy: "user123"
        metadata:
          tag1: "value1"
    GrantOutput:
      summary: Simple grant output
      value:
        id: "1e60800e-849b-43d1-870e-57afc8d75473"
        workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
        fundId: "daf-id"
        createdAt: "2021-08-10 15:00:00.000"
        updatedAt: "2021-08-11 15:34:00.000"
        amount: 15000
        status: "Initiated"
    RecurringGrantOutput:
      summary: Simple recurring grant output.
      value:
        id: "1e60800e-849b-43d1-870e-57afc8d75473"
        workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
        fundId: "daf-id"
        createdAt: "2021-08-10 15:00:00.000"
        updatedAt: "2021-08-11 15:34:00.000"
        amount: 15000
        frequency: MONTHLY
    UnintegratedGrantOutput:
      summary: Simple unintegrated grant output
      value:
        id: "1e60800e-849b-43d1-870e-57afc8d75473"
        workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
        fundId: "daf-id"
        createdAt: "2021-08-10 15:00:00.000"
        updatedAt: "2021-08-11 15:34:00.000"
        amount: 15000
    DafOutput:
      summary: NPT DAF
      value:
        id: "0bf40881-8ee2-47fb-98ca-f58c7999aa34"
        orgName: "National Philanthropic Trust"
        address: "123 Main St."
        address2: "Apt 100"
        city: "New York City"
        state: "New York"
        zip: "12345"
        supported: true
        minimumGrantAmount: 25000
        institutionDown: false
