openapi: 3.0.0
info:
  title: Chariot API
  version: 'v1'
  description: The Chariot REST API. Please see https://givechariot.readme.io/reference/overview for more details.
  contact:
    name: Chariot Development Team
    url: https://www.givechariot.com/contact
    email: partners@givechariot.com
  termsOfService: https://www.givechariot.com/legal-nonprofit
servers:
  - url: https://sandboxapi.givechariot.com
    description: Sandbox
  - url: https://api.givechariot.com
    description: Production
paths:
  /v1/nonprofit/{ein}:
    get:
      summary: Get nonprofit by EIN
      description: |-
        Get a nonprofit organization by EIN.
        If the nonprofit does not exist, this returns 404 Not Found status.
        In the case that the nonprofit does not exist, you can create one by calling the POST /v1/nonprofits API endpoint.
        The EIN should be exactly 9 digits and should not contain any special characters such as dashes.
      operationId: get-nonprofit-by-ein
      security:
        - auth0:
          - "read:nonprofits"
      parameters:
        - name: ein
          in: path
          description: |-
            The unique federal employer identification number (EIN) of the nonprofit.
            This value should be exactly 9 digits and should not contain any special characters such as dashes.
          schema:
            type: string
          required: true
          example: "530196605"
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nonprofit"
              examples:
                RedCross:
                  $ref: "#/components/examples/NonprofitRedCross"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/nonprofits:
    post:
      summary: Create nonprofit
      description: |-
        Create a nonprofit organization account.
        This is useful for integration partners to use after a nonprofit consents to use the Chariot payment option on their donation forms.
        If a nonprofit does not already exist for the EIN, this will return a 201 Created status.
        If a nonprofit already exists for the given EIN on the system, this will return a 409 Conflict status.
        When integrating this API, it's useful to either handle the 409 error or make a call to the GET v1/nonprofit/{ein} API first to check if it exists prior to creating it.
      operationId: create-nonprofit
      security:
        - auth0:
          - "create:nonprofits"
      requestBody:
        $ref: "#/components/requestBodies/CreateNonprofitRequest"
      responses:
        '201':
          description: "Created"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nonprofit"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '409':
          $ref: "#/components/responses/ConflictError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/connects:
    post:
      summary: Create Connect
      description: |-
        Get or create a Connect object. Only one Connect object can be created per Nonprofit-Subscription pair. If one already exists, this will return a 200 status with the existing object. The returned Connect can be used to integrate the client-side Chariot Connect component using the id property (CID) and also query for data generated from the Chariot Connect instance from the Chariot API using the apiKey property.
      operationId: create-connect
      security:
        - auth0:
          - "create:connects"
      parameters:
        - name: nonprofit
          in: query
          description: |-
            The unique identifier (ID) for the nonprofit.
            The format should be a v4 UUID according to RFC 4122.
            This can be found by calling the /v1/nonprofit/{ein} API endpoint.
          schema:
            type: string
            format: uuid
          required: true
          example: 6af3f58e-7a80-4997-8259-770c033d7d3a
      requestBody:
        $ref: "#/components/requestBodies/CreateConnectRequest"
      responses:
        '200':
          description: the existing Connect object
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connect"
              examples:
                Simple:
                  $ref: "#/components/examples/ConnectOutput"
        '201':
          description: the created connect object
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connect"
              examples:
                Simple:
                  $ref: "#/components/examples/ConnectOutput"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/connects/{id}:
    get:
      summary: Get Connect
      description: |-
        Get a Connect object with the unique identifier (CID)
      operationId: get-connect
      security:
        - auth0:
          - "read:connects"
      parameters:
        - name: id
          in: path
          description: the unique id of the connect
          schema:
            type: string
          required: true
          example: live_xJd0lUrvpDkzeGBWZbuI2wbvEdM
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connect"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/grants:
    get:
      summary: List Grants
      description: |-
        List all grants for the provided API Key. This API allows for paginating over many results.
      operationId: list-grants
      security:
        - auth0:
          - "read:grants"
          api_key: []
      parameters:
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls and the value of this field should be from the nextPageToken in the previous response.
          schema:
            type: string
      responses:
        '200':
          $ref: "#/components/responses/ListGrantsResponse"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create Grant
      description: |-
        Create a grant from a workflow session. This is useful to capture a grant intent from an authorized connect workflow session and submit the grant request.
        The grant must be captured within 5 minutes of authorization otherwise the request will return status 410 Gone.
        A grant can only be captured once from any given workflow session so any duplicate requests will return status 409 Conflict.
      operationId: create-grant
      security:
        - auth0:
            - "create:grants"
          api_key: []
      requestBody:
        $ref: "#/components/requestBodies/GrantCaptureRequest"
      responses:
        '201':
          description: Created grant
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
            Location:
              description: The URI reference of the created grant object.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Grant"
              examples:
                Simple:
                  $ref: "#/components/examples/GrantOutput"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '409':
          $ref: "#/components/responses/ConflictError"
        '410':
          $ref: "#/components/responses/GoneError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/grants/{id}:
    get:
      summary: Get Grant
      description: |-
        Get a grant object generated by Chariot Connect.
        If the grant does not exist, returns a 404 status.
        If the provided ID is not a v4 UUID according to RFC 4122, returns a 400 status.
      operationId: get-grant
      security:
      - auth0:
        - "read:grants"
        api_key: []
      parameters:
        - name: id
          in: path
          description: the unique id of the grant
          schema:
            type: string
            format: uuid
          required: true
          example: 10229488-08d2-4629-b70c-a2f4f4d25344
      responses:
        '200':
          description: OK
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Grant"
              examples:
                Simple:
                  $ref: "#/components/examples/GrantOutput"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update Grant
      description: |-
        Update a grant object.
        Currently, this API only supports updating the status of a grant.
        If the grant does not exist, returns a 404 status.
        If the provided ID is not a v4 UUID according to RFC 4122, returns a 400 status.
      operationId: update-grant
      security:
        - auth0:
          - "update:grants"
          api_key: []
      parameters:
        - name: id
          in: path
          description: the unique id of the grant
          schema:
            type: string
            format: uuid
          required: true
          example: 759a0eb7-632e-4943-8033-b21ea897561e
      requestBody:
        $ref: "#/components/requestBodies/GrantUpdateRequest"
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Grant"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/dafs:
    get:
      summary: List DAFs
      description: List all DAF objects. This API allows for paginating over many results.
      operationId: list-dafs
      parameters:
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls.
          schema:
            type: string
      responses:
        '200':
          $ref: "#/components/responses/ListDafsResponse"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/dafs/{id}:
    get:
      summary: Get DAF object
      description: |-
        Get a DAF object by id.
        If the DAF does not exist, returns a 404 status.
        If the provided ID is not a v4 UUID according to RFC 4122, returns a 400 status.
      operationId: get-daf
      parameters:
        - name: id
          in: path
          description: the unique id of the DAF
          schema:
            type: string
            format: uuid
          required: true
          example: f9e28217-e0f7-4a54-9764-d664ffb10722
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Daf"
              examples:
                Npt:
                  $ref: "#/components/examples/DafOutput"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks:
    get:
      summary: List Webhooks
      description: List all Webhooks
      operationId: list-webhooks
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls.
          schema:
            type: string
      responses:
        '200':
          $ref: "#/components/responses/ListWebhooksResponse"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create Webhook
      description: |-
        Creates a Webhook and registers the provided URL endpoint to receive
        HTTP POST webhook messages. The endpoint for the Webhook should be able
        to accept HTTP POST requests. Please see our Webhooks documentation
        for more details.
      operationId: create-webhook
      security:
        - auth0:
          - "create:webhooks"
      requestBody:
        $ref: "#/components/requestBodies/CreateWebhookRequest"
      responses:
        '201':
          description: the created webhook object
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
              example:
                id: "test_de5a2e7d-c960-4eaa-8bd2-e8d2cc5b1a55"
                url: "https://api.acme.com/webhooks/chariot"
                description: "Webhook for grant success"
                eventTypes:
                  - "grant.succeeded"
                disabled: false
                createdAt: "2021-08-10 15:00:00.000"
                updatedAt: "2021-08-11 15:34:00.000"
                metadata:
                  tag1: "value1"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks/{id}:
    get:
      summary: Get Webhook
      description: Get a webhook
      operationId: get-webhook
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update Webhook
      description: Update a Webhook
      operationId: update-webhook
      security:
        - auth0:
          - "update:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Webhook"
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete Webhook
      description: Delete a Webhook
      operationId: delete-webhook
      security:
        - auth0:
          - "delete:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks/{id}/test:
    post:
      summary: Test Webhook
      description: Execute a test on a webhook. This will send a test payload to the webhook's endpoint
      operationId: test-webhook
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventType:
                  type: string
                  description: |-
                    The event type to trigger
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks/{id}/messages:
    get:
      summary: List Webhook Messages
      description: |-
        Lists the Webhook messages for a specific webhook. A message refers to the
        payload sent to your webhook endpoint whenever a specific event occurs.
        Each message represents a discrete event-triggered notification that
        contains relevant data related to the event.
      operationId: list-webhook-messages
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls.
          schema:
            type: string
      responses:
        '200':
          $ref: "#/components/responses/ListWebhookMessagesResponse"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks/{id}/messages/{messageId}:
    get:
      summary: Get Webhook Message
      description: |-
        Gets a specific Webhook Message for a specific webhook. A message refers to the
        payload sent to your webhook endpoint whenever a specific event occurs.
        Each message represents a discrete event-triggered notification that
        contains relevant data related to the event.
      operationId: get-webhook-message
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
        - name: messageId
          in: path
          description: the unique id of the webhook message
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookMessage"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks/{id}/messages/{messageId}/resend:
    post:
      summary: Resend Webhook Message
      description: |-
        Resend webhook request for a specific webhook. This does not resend the
        request to all of the original webhooks.
      operationId: resend-message
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
        - name: messageId
          in: path
          description: the unique id of the webhook message
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks/{id}/messages/{messageId}/attempts:
    get:
      summary: List Webhook Message Attempts
      description: Lists the attempts to send a request for a specific message for a specific webhook
      operationId: list-message-attempts
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
        - name: messageId
          in: path
          description: the unique id of the webhook message
          schema:
            type: string
          required: true
        - name: pageLimit
          in: query
          description: the number of results to return; defaults to 10, max is 100
          schema:
            type: integer
            default: 10
        - name: pageToken
          in: query
          description: |-
            A token to use to retrieve the next page of results. This is useful for paginating over many pages of results. If set, all other arguments are expected to be kept the same as previous calls.
          schema:
            type: string
      responses:
        '200':
          $ref: "#/components/responses/ListWebhookMessageAttemptsResponse"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /v1/webhooks/{id}/messages/{messageId}/attempts/{attemptId}:
    get:
      summary: Get Webhook Message Attempt
      description: Gets a Webhook Message Attempt for a specific message and webhook.
      operationId: get-webhook-message-attempt
      security:
        - auth0:
          - "read:webhooks"
      parameters:
        - name: id
          in: path
          description: the unique id of the webhook
          schema:
            type: string
          required: true
        - name: messageId
          in: path
          description: the unique id of the webhook message
          schema:
            type: string
          required: true
        - name: attemptId
          in: path
          description: the unique id of the webhook message attempt
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookMessageAttempt"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthenticationError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    auth0:
      type: oauth2
      description: This API uses OAuth2 with the client credentials flow.
      flows:
        clientCredentials:
          tokenUrl: https://login.givechariot.com/oauth/token
          scopes:
            "create:nonprofits": create a nonprofit and user
            "read:nonprofits": read all nonprofits
            "create:connects": create any connect, principle does not need to be associated with nonprofit
            "read:connects": read all connects for a nonprofit
            "create:grants": create a grant from a workflow session
            "read:grants": "read grants"
            "read:webhooks": read all webhooks associated with a subscription
            "create:webhooks": create webhooks for a subscritpion
            "update:webhooks": update all webhooks associated with a subscription
            "delete:webhooks": delete webhooks associated with a subscription
    api_key:
      type: apiKey
      in: header
      name: x-chariot-api-key
  schemas:
    Nonprofit:
      type: object
      description: |-
        A Nonprofit represents a registered 501(c)(3) charitable organization is good standing with the IRS.
      required:
        - id
        - name
        - ein
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object.
          example: g33ee4ee-f881-42a0-85e3-1dde7118w9k2
        name:
          type: string
          description: The IRS registered name of the nonprofit organization
          example: Leading for Children
        preferredName:
          type: string
          description: |-
            The preferred name of the nonprofit organization. This is the name that shows up on the nonprofit's dashboard and Connect modal. This is useful for nonprofits that are known by a different name to donors and don't use their IRS registered name publicly.
          example: LfC
        ein:
          type: string
          description: The US federal employer identification number (Tax ID); unique on the system. This value should be exactly 9 digits and should not contain any special characters such as dashes.
          example: "043567500"
        address:
          $ref: "#/components/schemas/Address"
        billingUser:
          type: string
          description: ID of the user who manages the billing for the nonprofit.
          example: str_billing_user_789
        hasPaymentMethod:
          type: boolean
          description: Flag to indicate if the nonprofit has a payment method on file
          example: true
        picture:
          type: string
          description: The URI of the nonprofit's logo
        website:
          type: string
          description: The URL of the nonprofit's website
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
    Connect:
      type: object
      description: |-
        A Connect represents an instance of Chariot Connect for a particular Nonprofit. A nonprofit organization will create Connect objects in order to integrate Chariot Connect into their websites or fundraising platforms to start accepting donations directly from Donor Advised Funds. Each Nonprofit can have multiple Connect objects where each one represents a logical separation for how the organization wants to organize their sources of donations. For example, they might have 2 Connect instances, one that they use to integrate Chariot Connect directly on their website and the other that they provide to a 3rd party fundraising platform. On the client side, Chariot Connect is instantiated with the `id` of the Connect object, also called the `cid`. A connect object also contains an `apiKey`. This is useful for nonprofits to provide to fundraising platforms on their behalf to programatically integrate Chariot Connect and access resources and information created from the Connect instance through various Chariot API endpoints. More information on integrating Chariot Connect into a client-side application can be found here: https://givechariot.readme.io
      required:
        - id
        - name
        - apiKey
        - subscriptionId
      properties:
        id:
          type: string
          readOnly: true
          description: |-
            The unique identifier for this object. This is also the 'publishable' cid to use for initializing Connect for client-side integration.
          example: test_connect123
        name:
          type: string
          description: A human readable name for the connect, optional.
          example: website
        apiKey:
          type: string
          readOnly: true
          description: A secure token that can be used to make M2M API calls to read data generated by this object.
          example: test_apiTokenABC
        subscriptionId:
          type: string
          description: |-
            The ID of the Chariot subscription associated with this connect. A Subscription defines two things for a Connect:
              1. WorkflowPlan - defines the Chariot Connect modal workflow
              2. PricingPlan - defines the fees and transaction pricing model for the Chariot Connect
          example: default
        active:
          type: boolean
          description: |-
            A flag to indicate if this connect is active. If true, then this Connect can process donations and grants, otherwise this Connect cannot process grants.
          example: true
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
        createdBy:
          type: string
          readOnly: true
          description: ID of the user who created this object.
          example: auth0-user-id-123
        archived:
          type: boolean
          readOnly: true
          description: A flag to indicate if this object is marked for deletion.
          example: false
        metadata:
          type: object
          description: A map of arbitrary string keys and values to store information about the object.
          additionalProperties:
            type: string
    Daf:
      type: object
      description: |-
        A DAF represents Donor-Advised Funds which are connected with Chariot. These may be integrated (able to authenticate through Chariot) or unintegrated.
      required:
        - id
        - orgName
        - address
        - address2
        - city
        - state
        - zip
        - supported
        - minimumGrantAmount
        - institutionDown
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for this object.
          example: 0bf40881-8ee2-47fb-98ca-f58c7999aa34
        orgName:
          type: string
          readOnly: true
          description: A human readable name for the DAF.
          example: website
        address:
          type: string
          readOnly: true
          description: The first address line.
          example: 123 Main St.
        address2:
          type: string
          readOnly: true
          description: The second address line.
          example: Apt 100
        city:
          type: string
          readOnly: true
          description: The city name for the address.
          example: New York City
        state:
          type: string
          readOnly: true
          description: The state name for the address.
          example: New York
        zip:
          type: string
          readOnly: true
          description: The zipcode for the address.
          example: "12345"
        supported:
          type: boolean
          readOnly: true
          description: A flag to indicate if this DAF is supported by Chariot.
          example: false
        minimumGrantAmount:
          type: number
          readOnly: true
          description: The minimum grant amount allowed for this DAF.
          example: 123
        institutionDown:
          type: boolean
          readOnly: true
          description: A flag to indicate if the institution is down.
          example: false
    Grant:
      type: object
      description: |-
        A Grant represents a successfully initiated grant request with a Donor Advised Fund.Grants are created when a person interacts with an instance of Chariot Connect and successfully submits a grant and completes the workflow. There can be many grants associated with a Connect object and therefore a Nonprofit.
      required:
        - id
        - userFriendlyId
        - workflowSessionId
        - fundId
        - amount
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object
          format: uuid
          example: cfe09e64-6a74-4dab-a565-361185a6f248
        userFriendlyId:
          type: string
          readOnly: true
          description: The user friendly identifier for the Grant
          example: chariot-1234455
        workflowSessionId:
          type: string
          readOnly: true
          description: ID of the Connect Workflow Session associated with this grant
          format: uuid
          example: 2d4b2a43-a5b4-4be1-ad1f-f932016ca4a6
        fundId:
          type: string
          readOnly: true
          description: ID of the donor advised fund
          example: daf-id
        externalGrantId:
          type: string
          description: ID of the grant associated with the donor advised fund
          example: 897823sdjf8sfjs
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created; expressed in ISO 8601 format
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated; expressed in ISO 8601 format
          example: "2021-07-11 15:34:00.000"
        amount:
          type: number
          format: double
          description: The grant amount expressed in units of cents; includes the feeAmount if coveredFees is true
          example: 150.0
        status:
          type: string
          description: The status of the grant
          example: Pending
        coveredFees:
          type: boolean
          description: Flag to indicate if the user opted to cover fees of the donation
          deprecated: true
          example: true
        feeAmount:
          type: integer
          format: int32
          description: |-
            The Chariot processing fee amount expressed in cents.
            This is the amount that Chariot charges for the grant.
        metadata:
          type: object
          description: A map of arbitrary string keys and values to store information about the object
          additionalProperties:
            type: string
        firstName:
          type: string
          description: The donor's first name
          example: "Warren"
        lastName:
          type: string
          description: The donor's last name
          example: "Buffet"
        phone:
          type: string
          description: The donor's phone number
          example: "1237861020"
        email:
          type: string
          description: The donor's email
          example: "warrenBuffet@example.com"
        note:
          type: string
          description: An note inputted by the user at submisson
          example: "Please dedicate in memory of grandma"
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/GrantStatus'
          description: The list of grant statuses for this grant
    Webhook:
      type: object
      description: |-
        A Webhook represents an HTTP endpoint that will receive webhook messages
        (HTTP requests) on certain events. Webhooks are a way for web applications
        to communicate with each other in real-time. They enable one application
        to send automatic notifications or data updates to another application
        when a specific event occurs.
      required:
        - id
        - url
        - eventTypes
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for this object.
          example: my-subscription-id
        url:
          type: string
          readOnly: true
          description: The URL to send requests to.
          example: https://api.acme.com/webhooks/chariot
        description:
          type: string
          readOnly: true
          description: The description of the webhook.
          example: Webhook for grant success
        eventTypes:
          type: array
          readOnly: true
          description: The events that this webhook will receive.
          items:
            type: string
          example:
            - "grant.succeeded"
        disabled:
          type: boolean
          readOnly: true
          description: |-
            A flag to indicate if the webhook is disabled
          example: false
        metadata:
          type: object
          description: A map of arbitrary string keys and values to store information about the object.
          additionalProperties:
            type: string
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
    WebhookMessage:
      type: object
      description: |-
        A WebhookMessage represents a single message that is triggered by a specific event.
        Note that a message is specific to a single endpoint.
      required:
        - id
        - eventType
        - timestamp
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for this object.
          example: my-subcription-id
        eventType:
          type: string
          readOnly: true
          description: The event type of the message.
          example: grant.succeeded
        payload:
          type: object
          readOnly: true
          description: The payload of the webhook message. This is only returned when getting a single message, but not when getting a list of messages.
          example:
            id: "grantId"
        timestamp:
          type: string
          readOnly: true
          description: The timestamp that the webhook message was sent.
          example: "2019-08-24T14:15:22Z"
        status:
          type: string
          readOnly: true
          description: The status of this message. Indicates if it has succeeded, failed, is pending or is currently sending.
          example: "success"
        nextAttempt:
          type: string
          readOnly: true
          description: The timestamp of the next attempt for this message.
          example: "2019-08-24T14:15:22Z"
    WebhookMessageAttempt:
      type: object
      description: |-
        A WebhookMessageAttempt object represents an single attempt to send a webhook
        message to a specific endpoint
      required:
        - id
        - response
        - responseStatusCode
        - status
        - timestamp
        - url
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for this object.
          example: atmpt_2RqbUykGEn9kyjeo9x2lpyMgX1H
        responseBody:
          type: string
          readOnly: true
          description: The response body of the endpoint request.
          example: "{ result: 'success' }"
        responseStatusCode:
          type: number
          readOnly: true
          description: The response status code of the endpoint request
          example: 200
        status:
          type: string
          readOnly: true
          description: The status of this message attempt.
          example: "success"
        timestamp:
          type: string
          readOnly: true
          description: The timestamp that the webhook message attempt was sent.
          example: "2019-08-24T14:15:22Z"
        url:
          type: string
          readOnly: true
          description: The URL that the request was sent to.
          example: https://api.acme.com/webhooks/chariot
    GrantStatus:
      type: object
      required:
        - id
        - createdAt
        - status
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object
          format: uuid
          example: cfe09e64-6a74-4dab-a565-361185a6f248
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created; expressed in ISO 8601 format
          example: "2020-07-10 15:00:00.000"
        status:
          type: string
          description: The status of the grant
          example: Received
        comment:
          type: string
          description: The user comment for the update
          example: The grant has been received by the nonprofit
    Address:
      type: object
      required:
        - city
        - country
        - line1
        - postalCode
        - state
      properties:
        city:
          type: string
          description: City, district, suburb, town, or village.
        country:
          type: string
          description: Two-letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        line1:
          type: string
          description: Address line 1 (e.g. street, PO Box, or company name)
        line2:
          type: string
          description: Address line 2 (e.g. apartment, suite, unit, or building)
        postalCode:
          type: string
          description: ZIP or postal code
        state:
          type: string
          description: State, county, province, or region
    Error:
      type: object
      required:
        - timestamp
        - code
        - error
        - message
      properties:
        timestamp:
          type: string
          description: time when the error was reported. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        code:
          type: number
          description: HTTP status code of the error
          example: 400
        error:
          type: string
          description: A short name of the error; usually the HTTP status.
          example: Bad Request
        message:
          type: string
          description: The description of the error
          example: Expected an API key to be provided in the header `x-chariot-api-key`
  headers:
    X-Request-Id:
      description: The unique identifier for the request
      schema:
        type: string
    Location:
      description: The URI of the created object
      schema:
        type: string
  requestBodies:
    GrantCaptureRequest:
      description: |-
        The request to create and submit a grant. This is useful to capture a grant intent associated with Connect workflow session.
        The request should specify either the grant amount or coverFees property.
        Note that the coverFees property is deprecated and will be removed in a future version.
        If the amount is specified, this will be the grant amount submitted for processing by the DAF.
        In this case, any fees collected by Chariot will be calculated based on this provided amount.
        If amount is specified, the coverFees property will have no effect.
        If amount is not specified, the grant amount that will be submitted for processing will depend
        on if the coverFees property is set to true. When coverFees is true, the grant amount that
        will be submitted for processing will be the grant amount + fee amount from the workflow session.
        Otherwise, if coverFees is false or not specified, the grant amount that was previously
        authorized through the Chariot workflow session will be submitted for processing.
      required: true
      content:
        application/json:
          schema:
            type:
              object
            required:
              - connectId
            properties:
              workflowSessionId:
                type: string
                description: The identifier of the Workflow Session
              amount:
                type: number
                description: |-
                  The final grant amount in cents that will be processed by Chariot and submitted to the DAF.
                  This amount must be in whole dollar increments (rounded to the nearest hundred) as currently
                  all DAFs only accept whole dollar grants.
              coverFees:
                type: boolean
                deprecated: true
                description: |-
                  A flag to indicate if the user opted to cover the fees. Defaults to false if not specified.
              donor:
                type: object
                properties:
                  firstName:
                    type: string
                    description: The first name of the donor
                  lastName:
                    type: string
                    description: The last name of the donor
                  email:
                    type: string
                    description: The email address of the donor
                  phone:
                    type: string
                    description: The phone number of the donor
    GrantUpdateRequest:
      description: |-
        The request to update a grant.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - workflowSessionId
              - status
            properties:
              workflowSessionId:
                type: string
                description: |-
                  The identifier of the Workflow Session for this Grant
              status:
                type: string
                description: |-
                  The status of the grant. Must be either 'Initiated' or 'Received'.
    CreateConnectRequest:
      description: |-
        The request to create a new Connect object for a Nonprofit.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: |-
                  A human readable name of the Connect, optional.
              metadata:
                type: object
                description: A map of arbitrary string keys and values to store information about the object.
                additionalProperties:
                  type: string
    CreateNonprofitRequest:
      description: |-
        The request to create and register a nonprofit organization account.
        The ein and user.email properties are required.
        The user.email should be a valid contact email address for the nonprofit organization.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - ein
              - user
            properties:
              user:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
                    description: The email address for the nonprofit account contact
                    example: ben.give@co.com
                  phone:
                    type: string
                    description: The phone number for the nonprofit account contact
                    example: "9127772424"
                  firstName:
                    type: string
                    description: The first name of the nonprofit account contact
                    example: Ben
                  lastName:
                    type: string
                    description: The last name of the nonprofit account contact
                    example: Give
              ein:
                type: string
                description: The US federal employer identification number (Tax ID); unique on the system
                example: "043567500"
              preferredName:
                type: string
                description: |-
                  The preferred name of the nonprofit organization. This is the name that shows up on the nonprofit's dashboard and Connect modal. This is useful for nonprofits that are known by a different name to donors and don't use their IRS registered name publicly.
              picture:
                type: string
                description: The URI of the nonprofit's logo
              website:
                type: string
                description: The URL of the nonprofit's website
    CreateWebhookRequest:
      description: |-
        The request to create a webhook.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - url
              - eventTypes
            properties:
              url:
                type: string
                description: The URL to send requests to.
                example: https://api.acme.com/webhooks/chariot
              description:
                type: string
                description: The description of the webhook.
                example: Webhook for grant success
              eventTypes:
                type: array
                description: The events that this webhook will receive.
                items:
                  type: string
                example:
                  - "grant.succeeded"
              disabled:
                type: boolean
                description: |-
                  A flag to indicate if the webhook is disabled
                example: false
              metadata:
                type: object
                description: A map of arbitrary string keys and values to store information about the object.
                additionalProperties:
                  type: string
  responses:
    ListDafsResponse:
      description: The response for Dafs.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Daf"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only substituting the pageToken with this value). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "0bf40881-8ee2-47fb-98ca-f58c7999aa34"
                    orgName: "National Philanthropic Trust"
                    address: "123 Main St."
                    address2: "Apt 100"
                    city: "New York"
                    state: "NY"
                    zip: "12345"
                    supported: true
                    minimumGrantAmount: 5000
                    institutionDown: false
                nextPageToken: "c3f685f2-2dda-4956-815b-39867a5e5638"
            NoMoreResults:
              value:
                results:
                  - id: "0bf40881-8ee2-47fb-98ca-f58c7999aa34"
                    orgName: "National Philanthropic Trust"
                    address: "123 Main St."
                    address2: "Apt 100"
                    city: "New York"
                    state: "NY"
                    zip: "12345"
                    supported: true
                    minimumGrantAmount: 5000
                    institutionDown: false
    ListGrantsResponse:
      description: The response for Grants.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Grant"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only changing the pageToken). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "1e60800e-849b-43d1-870e-57afc8d75473"
                    userFriendlyId: "chariot-12345"
                    workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 15:00:00.000"
                    updatedAt: "2021-08-11 15:34:00.000"
                    amount: 15000
                    status: "Initialized"
                    feeBasis: 290
                    coveredFees: false
                nextPageToken: "c3f685f2-2dda-4956-815b-39867a5e5638"
            NoMoreResults:
              value:
                results:
                  - id: "1e60800e-849b-43d1-870e-57afc8d75473"
                    userFriendlyId: "chariot-12345"
                    workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
                    fundId: "daf-id"
                    createdAt: "2021-08-10 15:00:00.000"
                    updatedAt: "2021-08-11 15:34:00.000"
                    amount: 15000
                    status: "Initialized"
                    feeBasis: 290
                    coveredFees: false
    ListWebhooksResponse:
      description: The response for Webhooks.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Webhook"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only substituting the pageToken with this value). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "ep_2RnZDRO3HKwjATNe2J7n1Kf0Aox"
                    url: "https://api.acme.com/chariot/webhooks"
                    description: "Chariot webhook for my api"
                    eventTypes:
                      - "grant.succeeded"
                    metadata:
                      tag1: "value1"
                    disabled: false
                    createdAt: "2020-07-10 15:00:00.000"
                    updatedAt: "2020-07-10 15:00:00.000"
                nextPageToken: "ep_2RnZEJaiKHHTMoat2Hlm8JZuZpl"
            NoMoreResults:
              value:
                results:
                  - id: "ep_2RnZDRO3HKwjATNe2J7n1Kf0Aox"
                    url: "https://api.acme.com/chariot/webhooks"
                    description: "Chariot webhook for my api"
                    eventTypes:
                      - "grant.succeeded"
                    metadata:
                      tag1: "value1"
                    disabled: false
                    createdAt: "2020-07-10 15:00:00.000"
                    updatedAt: "2020-07-10 15:00:00.000"
    ListWebhookMessagesResponse:
      description: The response for Webhook Message list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/WebhookMessage"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only substituting the pageToken with this value). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "msg_2RnwjT4INrOwiDpvBrECM7pfyB4"
                    eventType: "grant.succeeded"
                    timestamp: "2019-08-24T14:15:22Z"
                    status: "success"
                    nextAttempt: "2019-08-24T14:15:22Z"
                nextPageToken: "msg_2RnvvAJ6K5HdsI4cri0hLlSVepq"
            NoMoreResults:
              value:
                results:
                  - id: "msg_2RnwjT4INrOwiDpvBrECM7pfyB4"
                    eventType: "grant.succeeded"
                    timestamp: "2019-08-24T14:15:22Z"
                    status: "success"
                    nextAttempt: "2019-08-24T14:15:22Z"
    ListWebhookMessageAttemptsResponse:
      description: The response for Webhook Message Attempts list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/WebhookMessageAttempt"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call to the same endpoint with the same parameters (only substituting the pageToken with this value). If specified, then more results exist on the server that were not returned, otherwise no more results exist on the server.
          examples:
            MoreResults:
              value:
                results:
                  - id: "atmpt_2RqQAJF9VyLpAeK4VeRamIIr6Nh"
                    response: ""
                    responseStatusCode: 200
                    status: "success"
                    timestamp: "2019-08-24T14:15:22Z"
                    url: "https://api.acme.com/chariot/webhooks"
                nextPageToken: "atmpt_2RqQ5LMeDvTpBiCtJjOlvAMBldu"
            NoMoreResults:
              value:
                results:
                  - id: "atmpt_2RqQAJF9VyLpAeK4VeRamIIr6Nh"
                    response: ""
                    responseStatusCode: 200
                    status: "success"
                    timestamp: "2019-08-24T14:15:22Z"
                    url: "https://api.acme.com/chariot/webhooks"
    BadRequestError:
      description: The request is invalid or contains invalid parameters
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 400
            error: "Bad Request"
            message: "Expected an API key to be provided in the header `x-chariot-api-key`"
    AuthenticationError:
      description: Unauthorized. The request is missing the security (OAuth2 Bearer token) requirements and the server is unable to verify the identify of the caller.
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 401
            error: "Unauthorized"
            message: "Unauthorized"
    ForbiddenError:
      description: Access denied
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 403
            error: "Forbidden"
            message: "User is not allowed to access this resource"
    NotFoundError:
      description: Resource Not Found
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 404
            error: "Not Found"
            message: "Resource is not found"
    ConflictError:
      description: Resource Conflicts
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 409
            error: "Conflict"
            message: "Request conflicts with an already existing resource"
    GoneError:
      description: Resource Gone or Expired
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 410
            error: "Gone"
            message: "The resource has expired"
    InternalServerError:
      description: Internal Server Error
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 500
            error: "Internal server error"
            message: "The server encountered an error processing your request"
  examples:
    NonprofitRedCross:
      summary: American Red Cross
      value:
        id: "021cf6aa-cb91-4b92-ae03-82a211cc8328"
        name: "American Red Cross"
        ein: "530196605"
        createdAt: "2021-07-10 15:00:00.000"
        updatedAt: "2021-07-11 15:34:00.000"
        hasPaymentMethod: true
        billingUser: "cus_billing_user_789"
    ConnectOutput:
      summary: Simple connect output
      value:
        id: "test_de5a2e7d-c960-4eaa-8bd2-e8d2cc5b1a55"
        name: "website"
        apiKey: "test_98235982835"
        subscriptionId: "default"
        active: true
        createdAt: "2021-07-10 15:00:00.000"
        updatedAt: "2021-07-11 15:34:00.000"
        createdBy: "user123"
        metadata:
          tag1: "value1"
    GrantOutput:
      summary: Simple grant output
      value:
        id: "1e60800e-849b-43d1-870e-57afc8d75473"
        userFriendlyId: "chariot-12345"
        workflowSessionId: "cfe09e64-6a74-4dab-a565-361185a6f248"
        fundId: "daf-id"
        createdAt: "2021-08-10 15:00:00.000"
        updatedAt: "2021-08-11 15:34:00.000"
        amount: 15000
        status: "Initiated"
        feeAmount: 465
        coveredFees: false
    DafOutput:
      summary: NPT DAF
      value:
        id: "0bf40881-8ee2-47fb-98ca-f58c7999aa34"
        orgName: "National Philanthropic Trust"
        address: "123 Main St."
        address2: "Apt 100"
        city: "New York City"
        state: "New York"
        zip: "12345"
        supported: true
        minimumGrantAmount: 25000
        institutionDown: false