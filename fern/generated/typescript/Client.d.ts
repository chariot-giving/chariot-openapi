/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as ChariotApi from "./api";
export declare namespace ChariotApiClient {
    interface Options {
        environment?: core.Supplier<environments.ChariotApiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class ChariotApiClient {
    protected readonly _options: ChariotApiClient.Options;
    constructor(_options: ChariotApiClient.Options);
    /**
     * Get a nonprofit organization by EIN.
     * If the nonprofit does not exist, this returns 404 Not Found status.
     * In the case that the nonprofit does not exist, you can create one by calling the POST /v1/nonprofits API endpoint.
     * The EIN should be exactly 9 digits and should not contain any special characters such as dashes.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.NotFoundError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    getNonprofitByEin(ein: string, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Nonprofit>;
    /**
     * Create a nonprofit organization account.
     * This is useful for integration partners to use after a nonprofit consents to use the Chariot payment option on their donation forms.
     * If a nonprofit does not already exist for the EIN, this will return a 201 Created status.
     * If a nonprofit already exists for the given EIN on the system, this will return a 409 Conflict status.
     * When integrating this API, it's useful to either handle the 409 error or make a call to the GET v1/nonprofit/{ein} API first to check if it exists prior to creating it.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.ConflictError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    createNonprofit(request: ChariotApi.CreateNonprofitRequest, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Nonprofit>;
    /**
     * Get or create a Connect object. Only one Connect object can be created per Nonprofit-Subscription pair. If one already exists, this will return a 200 status with the existing object. The returned Connect can be used to integrate the client-side Chariot Connect component using the id property (CID) and also query for data generated from the Chariot Connect instance from the Chariot API using the apiKey property.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.NotFoundError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    createConnect(request: ChariotApi.CreateConnectRequest, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Connect>;
    /**
     * Get a Connect object with the unique identifier (CID)
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.NotFoundError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    getConnect(id: string, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Connect>;
    /**
     * List all grants for the provided API Key. This API allows for paginating over many results.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    listGrants(request?: ChariotApi.ListGrantsRequest, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.ListGrantsResponse>;
    /**
     * Create a grant from a workflow session. This is useful to capture a grant intent from an authorized connect workflow session and submit the grant request.
     * The grant must be captured within 5 minutes of authorization otherwise the request will return status 410 Gone.
     * A grant can only be captured once from any given workflow session so any duplicate requests will return status 409 Conflict.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.NotFoundError}
     * @throws {@link ChariotApi.ConflictError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    createGrant(request?: ChariotApi.CreateGrantRequest, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Grant>;
    /**
     * Get a grant object generated by Chariot Connect.
     * If the grant does not exist, returns a 404 status.
     * If the provided ID is not a v4 UUID according to RFC 4122, returns a 400 status.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.NotFoundError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    getGrant(id: string, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Grant>;
    /**
     * Update a grant object.
     * Currently, this API only supports updating the status of a grant.
     * If the grant does not exist, returns a 404 status.
     * If the provided ID is not a v4 UUID according to RFC 4122, returns a 400 status.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.UnauthorizedError}
     * @throws {@link ChariotApi.ForbiddenError}
     * @throws {@link ChariotApi.NotFoundError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    updateGrant(id: string, request: ChariotApi.UpdateGrantRequest, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Grant>;
    /**
     * List all DAF objects. This API allows for paginating over many results.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    listDafs(request?: ChariotApi.ListDafsRequest, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.ListDafsResponse>;
    /**
     * Get a DAF object by id.
     * If the DAF does not exist, returns a 404 status.
     * If the provided ID is not a v4 UUID according to RFC 4122, returns a 400 status.
     * @throws {@link ChariotApi.BadRequestError}
     * @throws {@link ChariotApi.NotFoundError}
     * @throws {@link ChariotApi.InternalServerError}
     */
    getDaf(id: string, requestOptions?: ChariotApiClient.RequestOptions): Promise<ChariotApi.Daf>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
