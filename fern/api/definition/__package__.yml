# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

types:
  CreateNonprofitRequestUser:
    properties:
      email:
        type: string
        docs: The email address for the nonprofit account contact
      phone:
        docs: The phone number for the nonprofit account contact
        type: optional<string>
      firstName:
        docs: The first name of the nonprofit account contact
        type: optional<string>
      lastName:
        docs: The last name of the nonprofit account contact
        type: optional<string>

  ListGrantsResponse:
    properties:
      results:
        type: optional<list<Grant>>
      nextPageToken:
        docs: >-
          A cursor token to use to retrieve the next page of results by making
          another API call to the same endpoint with the same parameters (only
          changing the pageToken). If specified, then more results exist on the
          server that were not returned, otherwise no more results exist on the
          server.
        type: optional<string>

  CreateGrantRequestDonor:
    properties:
      firstName:
        docs: The first name of the donor
        type: optional<string>
      lastName:
        docs: The last name of the donor
        type: optional<string>
      email:
        docs: The email address of the donor
        type: optional<string>
      phone:
        docs: The phone number of the donor
        type: optional<string>

  ListDafsResponse:
    properties:
      results:
        type: optional<list<Daf>>
      nextPageToken:
        docs: >-
          A cursor token to use to retrieve the next page of results by making
          another API call to the same endpoint with the same parameters (only
          substituting the pageToken with this value). If specified, then more
          results exist on the server that were not returned, otherwise no more
          results exist on the server.
        type: optional<string>

  Nonprofit:
    docs: >-
      A Nonprofit represents a registered 501(c)(3) charitable organization is
      good standing with the IRS.
    properties:
      id:
        type: string
        docs: The unique identifier for the object.
      name:
        type: string
        docs: The IRS registered name of the nonprofit organization
      preferredName:
        docs: >-
          The preferred name of the nonprofit organization. This is the name
          that shows up on the nonprofit's dashboard and Connect modal. This is
          useful for nonprofits that are known by a different name to donors and
          don't use their IRS registered name publicly.
        type: optional<string>
      ein:
        type: string
        docs: >-
          The US federal employer identification number (Tax ID); unique on the
          system. This value should be exactly 9 digits and should not contain
          any special characters such as dashes.
      address:
        type: optional<Address>
      billingUser:
        docs: ID of the user who manages the billing for the nonprofit.
        type: optional<string>
      hasPaymentMethod:
        docs: Flag to indicate if the nonprofit has a payment method on file
        type: optional<boolean>
      picture:
        docs: The URI of the nonprofit's logo
        type: optional<string>
      website:
        docs: The URL of the nonprofit's website
        type: optional<string>
      createdAt:
        docs: Time when this object was created. Expressed in ISO 8601 format.
        type: optional<datetime>
      updatedAt:
        docs: Time when this object was last updated. Expressed in ISO 8601 format.
        type: optional<datetime>

  Connect:
    docs: >-
      A Connect represents an instance of Chariot Connect for a particular
      Nonprofit. A nonprofit organization will create Connect objects in order
      to integrate Chariot Connect into their websites or fundraising platforms
      to start accepting donations directly from Donor Advised Funds. Each
      Nonprofit can have multiple Connect objects where each one represents a
      logical separation for how the organization wants to organize their
      sources of donations. For example, they might have 2 Connect instances,
      one that they use to integrate Chariot Connect directly on their website
      and the other that they provide to a 3rd party fundraising platform. On
      the client side, Chariot Connect is instantiated with the `id` of the
      Connect object, also called the `cid`. A connect object also contains an
      `apiKey`. This is useful for nonprofits to provide to fundraising
      platforms on their behalf to programatically integrate Chariot Connect and
      access resources and information created from the Connect instance through
      various Chariot API endpoints. More information on integrating Chariot
      Connect into a client-side application can be found here:
      https://givechariot.readme.io
    properties:
      id:
        type: string
        docs: >-
          The unique identifier for this object. This is also the 'publishable'
          cid to use for initializing Connect for client-side integration.
      name:
        type: string
        docs: A human readable name for the connect, optional.
      apiKey:
        type: string
        docs: >-
          A secure token that can be used to make M2M API calls to read data
          generated by this object.
      subscriptionId:
        type: string
        docs: >-
          The ID of the Chariot subscription associated with this connect. A
          Subscription defines two things for a Connect:
            1. WorkflowPlan - defines the Chariot Connect modal workflow
            2. PricingPlan - defines the fees and transaction pricing model for the Chariot Connect
      active:
        docs: >-
          A flag to indicate if this connect is active. If true, then this
          Connect can process donations and grants, otherwise this Connect
          cannot process grants.
        type: optional<boolean>
      createdAt:
        docs: Time when this object was created. Expressed in ISO 8601 format.
        type: optional<datetime>
      updatedAt:
        docs: Time when this object was last updated. Expressed in ISO 8601 format.
        type: optional<datetime>
      createdBy:
        docs: ID of the user who created this object.
        type: optional<string>
      archived:
        docs: A flag to indicate if this object is marked for deletion.
        type: optional<boolean>
      metadata:
        docs: >-
          A map of arbitrary string keys and values to store information about
          the object.
        type: optional<map<string, string>>

  Daf:
    docs: >-
      A DAF represents Donor-Advised Funds which are connected with Chariot.
      These may be integrated (able to authenticate through Chariot) or
      unintegrated.
    properties:
      id:
        type: string
        docs: The unique identifier for this object.
      orgName:
        type: string
        docs: A human readable name for the DAF.
      address:
        type: string
        docs: The first address line.
      address2:
        type: string
        docs: The second address line.
      city:
        type: string
        docs: The city name for the address.
      state:
        type: string
        docs: The state name for the address.
      zip:
        type: string
        docs: The zipcode for the address.
      supported:
        type: boolean
        docs: A flag to indicate if this DAF is supported by Chariot.
      minimumGrantAmount:
        type: double
        docs: The minimum grant amount allowed for this DAF.
      institutionDown:
        type: boolean
        docs: A flag to indicate if the institution is down.

  Grant:
    docs: >-
      A Grant represents a successfully initiated grant request with a Donor
      Advised Fund.Grants are created when a person interacts with an instance
      of Chariot Connect and successfully submits a grant and completes the
      workflow. There can be many grants associated with a Connect object and
      therefore a Nonprofit.
    properties:
      id:
        type: string
        docs: The unique identifier for the object
      userFriendlyId:
        type: string
        docs: The user friendly identifier for the Grant
      workflowSessionId:
        type: string
        docs: ID of the Connect Workflow Session associated with this grant
      fundId:
        type: string
        docs: ID of the donor advised fund
      externalGrantId:
        docs: ID of the grant associated with the donor advised fund
        type: optional<string>
      createdAt:
        docs: Time when this object was created; expressed in ISO 8601 format
        type: optional<datetime>
      updatedAt:
        docs: Time when this object was last updated; expressed in ISO 8601 format
        type: optional<datetime>
      amount:
        type: double
        docs: >-
          The grant amount expressed in units of cents; includes the feeAmount
          if coveredFees is true
      status:
        docs: The status of the grant
        type: optional<string>
      coveredFees:
        docs: Flag to indicate if the user opted to cover fees of the donation
        type: optional<boolean>
      feeAmount:
        docs: |-
          The Chariot processing fee amount expressed in cents.
          This is the amount that Chariot charges for the grant.
        type: optional<integer>
      metadata:
        docs: >-
          A map of arbitrary string keys and values to store information about
          the object
        type: optional<map<string, string>>
      firstName:
        docs: The donor's first name
        type: optional<string>
      lastName:
        docs: The donor's last name
        type: optional<string>
      phone:
        docs: The donor's phone number
        type: optional<string>
      email:
        docs: The donor's email
        type: optional<string>
      note:
        docs: An note inputted by the user at submisson
        type: optional<string>
      statuses:
        docs: The list of grant statuses for this grant
        type: optional<list<GrantStatus>>

  GrantStatus:
    properties:
      id:
        type: string
        docs: The unique identifier for the object
      createdAt:
        type: datetime
        docs: Time when this object was created; expressed in ISO 8601 format
      status:
        type: string
        docs: The status of the grant
      comment:
        docs: The user comment for the update
        type: optional<string>

  Address:
    properties:
      city:
        type: string
        docs: City, district, suburb, town, or village.
      country:
        type: string
        docs: >-
          Two-letter country code
          (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
      line1:
        type: string
        docs: Address line 1 (e.g. street, PO Box, or company name)
      line2:
        docs: Address line 2 (e.g. apartment, suite, unit, or building)
        type: optional<string>
      postalCode:
        type: string
        docs: ZIP or postal code
      state:
        type: string
        docs: State, county, province, or region

  Error:
    properties:
      timestamp:
        type: string
        docs: time when the error was reported. Expressed in ISO 8601 format.
      code:
        type: double
        docs: HTTP status code of the error
      error:
        type: string
        docs: A short name of the error; usually the HTTP status.
      message:
        type: string
        docs: The description of the error

service:
  auth: false
  base-path: ""
  endpoints:
    get-nonprofit-by-ein:
      path: /v1/nonprofit/{ein}
      method: GET
      auth: true
      docs: >-
        Get a nonprofit organization by EIN.
        If the nonprofit does not exist, this returns 404 Not Found status.
        In the case that the nonprofit does not exist, you can create one by
        calling the POST /v1/nonprofits API endpoint.
        The EIN should be exactly 9 digits and should not contain any special
        characters such as dashes.
      path-parameters:
        ein:
          docs: >-
            The unique federal employer identification number (EIN) of the
            nonprofit.
            This value should be exactly 9 digits and should not contain any
            special characters such as dashes.
          type: string
      display-name: Get nonprofit by EIN
      response:
        docs: OK
        type: Nonprofit
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - NotFoundError
        - InternalServerError

    create-nonprofit:
      path: /v1/nonprofits
      method: POST
      auth: true
      docs: >-
        Create a nonprofit organization account.
        This is useful for integration partners to use after a nonprofit
        consents to use the Chariot payment option on their donation forms.
        If a nonprofit does not already exist for the EIN, this will return a
        201 Created status.
        If a nonprofit already exists for the given EIN on the system, this will
        return a 409 Conflict status.
        When integrating this API, it's useful to either handle the 409 error or
        make a call to the GET v1/nonprofit/{ein} API first to check if it
        exists prior to creating it.
      display-name: Create nonprofit
      request:
        name: CreateNonprofitRequest
        body:
          properties:
            user:
              type: CreateNonprofitRequestUser
            ein:
              type: string
              docs: >-
                The US federal employer identification number (Tax ID); unique
                on the system
            preferredName:
              docs: >-
                The preferred name of the nonprofit organization. This is the
                name that shows up on the nonprofit's dashboard and Connect
                modal. This is useful for nonprofits that are known by a
                different name to donors and don't use their IRS registered name
                publicly.
              type: optional<string>
            picture:
              docs: The URI of the nonprofit's logo
              type: optional<string>
            website:
              docs: The URL of the nonprofit's website
              type: optional<string>
      response:
        docs: Created
        type: Nonprofit
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - ConflictError
        - InternalServerError

    create-connect:
      path: /v1/connects
      method: POST
      auth: true
      docs: >-
        Get or create a Connect object. Only one Connect object can be created
        per Nonprofit-Subscription pair. If one already exists, this will return
        a 200 status with the existing object. The returned Connect can be used
        to integrate the client-side Chariot Connect component using the id
        property (CID) and also query for data generated from the Chariot
        Connect instance from the Chariot API using the apiKey property.
      display-name: Create Connect
      request:
        name: CreateConnectRequest
        query-parameters:
          nonprofit:
            docs: |-
              The unique identifier (ID) for the nonprofit.
              The format should be a v4 UUID according to RFC 4122.
              This can be found by calling the /v1/nonprofit/{ein} API endpoint.
            type: string
        body:
          properties:
            name:
              docs: A human readable name of the Connect, optional.
              type: optional<string>
            metadata:
              docs: >-
                A map of arbitrary string keys and values to store information
                about the object.
              type: optional<map<string, string>>
      response:
        docs: the existing Connect object
        type: Connect
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - NotFoundError
        - InternalServerError

    get-connect:
      path: /v1/connects/{id}
      method: GET
      auth: true
      docs: Get a Connect object with the unique identifier (CID)
      path-parameters:
        id:
          docs: the unique id of the connect
          type: string
      display-name: Get Connect
      response:
        docs: OK
        type: Connect
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - NotFoundError
        - InternalServerError

    list-grants:
      path: /v1/grants
      method: GET
      auth: true
      docs: >-
        List all grants for the provided API Key. This API allows for paginating
        over many results.
      display-name: List Grants
      request:
        name: ListGrantsRequest
        query-parameters:
          pageLimit:
            docs: the number of results to return; defaults to 10, max is 100
            type: optional<integer>
          pageToken:
            docs: >-
              A token to use to retrieve the next page of results. This is
              useful for paginating over many pages of results. If set, all
              other arguments are expected to be kept the same as previous calls
              and the value of this field should be from the nextPageToken in
              the previous response.
            type: optional<string>
      response:
        docs: The response for Grants.list
        type: ListGrantsResponse
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - InternalServerError

    create-grant:
      path: /v1/grants
      method: POST
      auth: true
      docs: >-
        Create a grant from a workflow session. This is useful to capture a
        grant intent from an authorized connect workflow session and submit the
        grant request.
        The grant must be captured within 5 minutes of authorization otherwise
        the request will return status 410 Gone.
        A grant can only be captured once from any given workflow session so any
        duplicate requests will return status 409 Conflict.
      display-name: Create Grant
      request:
        name: CreateGrantRequest
        body:
          properties:
            workflowSessionId:
              docs: The identifier of the Workflow Session
              type: optional<string>
            amount:
              docs: >-
                The final grant amount in cents that will be processed by
                Chariot and submitted to the DAF.
                This amount must be in whole dollar increments (rounded to the
                nearest hundred) as currently
                all DAFs only accept whole dollar grants.
              type: optional<double>
            coverFees:
              docs: >-
                A flag to indicate if the user opted to cover the fees. Defaults
                to false if not specified.
              type: optional<boolean>
            donor:
              type: optional<CreateGrantRequestDonor>
      response:
        docs: Created grant
        type: Grant
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - NotFoundError
        - ConflictError
        - InternalServerError

    get-grant:
      path: /v1/grants/{id}
      method: GET
      auth: true
      docs: >-
        Get a grant object generated by Chariot Connect.
        If the grant does not exist, returns a 404 status.
        If the provided ID is not a v4 UUID according to RFC 4122, returns a 400
        status.
      path-parameters:
        id:
          docs: the unique id of the grant
          type: string
      display-name: Get Grant
      response:
        docs: OK
        type: Grant
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - NotFoundError
        - InternalServerError

    update-grant:
      path: /v1/grants/{id}
      method: PATCH
      auth: true
      docs: >-
        Update a grant object.
        Currently, this API only supports updating the status of a grant.
        If the grant does not exist, returns a 404 status.
        If the provided ID is not a v4 UUID according to RFC 4122, returns a 400
        status.
      path-parameters:
        id:
          docs: the unique id of the grant
          type: string
      display-name: Update Grant
      request:
        name: UpdateGrantRequest
        body:
          properties:
            workflowSessionId:
              type: string
              docs: The identifier of the Workflow Session for this Grant
            status:
              type: string
              docs: >-
                The status of the grant. Must be either 'Initiated' or
                'Received'.
      response:
        docs: OK
        type: Grant
      errors:
        - BadRequestError
        - UnauthorizedError
        - ForbiddenError
        - NotFoundError
        - InternalServerError

    list-dafs:
      path: /v1/dafs
      method: GET
      auth: false
      docs: List all DAF objects. This API allows for paginating over many results.
      display-name: List DAFs
      request:
        name: ListDafsRequest
        query-parameters:
          pageLimit:
            docs: the number of results to return; defaults to 10, max is 100
            type: optional<integer>
          pageToken:
            docs: >-
              A token to use to retrieve the next page of results. This is
              useful for paginating over many pages of results. If set, all
              other arguments are expected to be kept the same as previous
              calls.
            type: optional<string>
      response:
        docs: The response for Dafs.list
        type: ListDafsResponse
      errors:
        - BadRequestError
        - InternalServerError

    get-daf:
      path: /v1/dafs/{id}
      method: GET
      auth: false
      docs: >-
        Get a DAF object by id.
        If the DAF does not exist, returns a 404 status.
        If the provided ID is not a v4 UUID according to RFC 4122, returns a 400
        status.
      path-parameters:
        id:
          docs: the unique id of the DAF
          type: string
      display-name: Get DAF object
      response:
        docs: OK
        type: Daf
      errors:
        - BadRequestError
        - NotFoundError
        - InternalServerError

errors:
  BadRequestError:
    status-code: 400
    type: Error

  UnauthorizedError:
    status-code: 401
    type: Error

  ForbiddenError:
    status-code: 403
    type: Error

  NotFoundError:
    status-code: 404
    type: Error

  ConflictError:
    status-code: 409
    type: Error

  InternalServerError:
    status-code: 500
    type: Error
